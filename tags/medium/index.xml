<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>medium on Headstone lamp - leetcode grind</title>
    <link>https://solairerove.github.io/tags/medium/</link>
    <description>Recent content in medium on Headstone lamp - leetcode grind</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© solairerove</copyright>
    <lastBuildDate>Mon, 30 Oct 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://solairerove.github.io/tags/medium/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>253. Meeting Rooms II</title>
      <link>https://solairerove.github.io/posts/meeting_rooms_ii/</link>
      <pubDate>Mon, 30 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/meeting_rooms_ii/</guid>
      <description># O(n * log(n)) time || O(n) space def min_meeting_rooms(self, intervals: List[List[int]]) -&amp;gt; int: start_times = sorted([i[0] for i in intervals]) end_times = sorted([i[1] for i in intervals]) res = 0 start, end = 0, 0 while start &amp;lt; len(intervals): if start_times[start] &amp;gt;= end_times[end]: res, end = res - 1, end + 1 res, start = res + 1, start + 1 return res To solve this problem, we can think of the start and end times of the intervals as events.</description>
    </item>
    
    <item>
      <title>5. Longest Palindromic Substring</title>
      <link>https://solairerove.github.io/posts/longest_palindromic_substring/</link>
      <pubDate>Fri, 27 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/longest_palindromic_substring/</guid>
      <description># O(n^2) time || O(1) space def longest_palindrome(self, s: str) -&amp;gt; str: def expand(i, j): while i &amp;gt;= 0 and j &amp;lt; len(s) and s[i] == s[j]: i, j = i - 1, j + 1 return s[i + 1: j] return max([expand(i, j) for i in range(len(s)) for j in (i, i + 1)], key=len) This problem can be solved using several methods. A common approach is to expand around the center.</description>
    </item>
    
    <item>
      <title>56. Merge Intervals</title>
      <link>https://solairerove.github.io/posts/merge_intervals/</link>
      <pubDate>Fri, 27 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/merge_intervals/</guid>
      <description># O(n * log(n)) time || O(n) space def merge(self, intervals: List[List[int]]) -&amp;gt; List[List[int]]: intervals.sort(key=lambda x: x[0]) res = [intervals[0]] for i in range(1, len(intervals)): if intervals[i][0] &amp;gt; res[-1][1]: res.append(intervals[i]) else: res[-1][1] = max(res[-1][1], intervals[i][1]) return res This is a classic interval problem. The idea is to first sort the intervals based on their start times. After sorting, you can then iterate over the sorted intervals and merge those that overlap.</description>
    </item>
    
    <item>
      <title>200. Number of Islands</title>
      <link>https://solairerove.github.io/posts/number_of_islands/</link>
      <pubDate>Thu, 26 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/number_of_islands/</guid>
      <description># O(n * m) time || O(n * m) space def num_islands_dfs(self, grid: List[List[str]]) -&amp;gt; int: n, m = len(grid), len(grid[0]) def dfs(i, j): if 0 &amp;lt;= i &amp;lt; n and 0 &amp;lt;= j &amp;lt; m and grid[i][j] == &amp;#34;1&amp;#34;: grid[i][j] = &amp;#34;0&amp;#34; dfs(i - 1, j) dfs(i + 1, j) dfs(i, j - 1) dfs(i, j + 1) res = 0 for i in range(n): for j in range(m): if grid[i][j] == &amp;#34;1&amp;#34;: res += 1 dfs(i, j) return res # O(n * m) time || O(n * m) space def num_islands_dfs_shorter(self, grid: List[List[str]]) -&amp;gt; int: n, m = len(grid), len(grid[0]) def dfs(i, j): if 0 &amp;lt;= i &amp;lt; n and 0 &amp;lt;= j &amp;lt; m and grid[i][j] == &amp;#34;1&amp;#34;: grid[i][j] = &amp;#34;0&amp;#34; list(map(dfs, [i - 1, i + 1, i, i], [j, j, j - 1, j + 1])) res = 0 for i in range(n): for j in range(m): if grid[i][j] == &amp;#34;1&amp;#34;: res += 1 dfs(i, j) return res # O(n * m) time || O(min(n, m)) space def num_islands_bfs(self, grid: List[List[str]]) -&amp;gt; int: n, m = len(grid), len(grid[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] def bfs(i, j): dq = collections.</description>
    </item>
    
    <item>
      <title>15. 3Sum</title>
      <link>https://solairerove.github.io/posts/three_sum/</link>
      <pubDate>Tue, 24 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/three_sum/</guid>
      <description># O(n^2) time || O(1) space def three_sum(self, nums: List[int]) -&amp;gt; List[List[int]]: nums.sort() triplets = [] for i in range(len(nums) - 2): if i &amp;gt; 0 and nums[i] == nums[i - 1]: continue low, high = i + 1, len(nums) - 1 while low &amp;lt; high: sum_ = nums[i] + nums[low] + nums[high] if sum_ == 0: triplets.append([nums[i], nums[low], nums[high]]) low, high = low + 1, high - 1 while low &amp;lt; high and nums[low] == nums[low - 1]: low += 1 while low &amp;lt; high and nums[high] == nums[high + 1]: high -= 1 elif sum_ &amp;lt; 0: low += 1 else: high -= 1 return triplets You can solve this problem using a sorting-based approach combined with the two-pointer technique.</description>
    </item>
    
    <item>
      <title>18. 4Sum</title>
      <link>https://solairerove.github.io/posts/four_sum/</link>
      <pubDate>Tue, 24 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/four_sum/</guid>
      <description># O(n^3) time || O(1) space def four_sum(self, nums: List[int], target: int) -&amp;gt; List[List[int]]: nums.sort() quadruplets = [] for i in range(len(nums) - 3): if i &amp;gt; 0 and nums[i] == nums[i - 1]: continue for j in range(i + 1, len(nums) - 2): if j &amp;gt; i + 1 and nums[j] == nums[j - 1]: continue low, high = j + 1, len(nums) - 1 while low &amp;lt; high: sum_ = nums[i] + nums[j] + nums[low] + nums[high] if sum_ == target: quadruplets.</description>
    </item>
    
    <item>
      <title>438. Find All Anagrams in a String</title>
      <link>https://solairerove.github.io/posts/find_all_anagrams_in_a_string/</link>
      <pubDate>Tue, 24 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/find_all_anagrams_in_a_string/</guid>
      <description># O(n) time | O(1) space def find_anagrams(self, s: str, p: str) -&amp;gt; List[int]: s_cnt, p_cnt = [0] * 26, [0] * 26 for c in s[:len(p)]: s_cnt[ord(c) - ord(&amp;#39;a&amp;#39;)] += 1 for c in p: p_cnt[ord(c) - ord(&amp;#39;a&amp;#39;)] += 1 res = [] if s_cnt == p_cnt: res.append(0) for i in range(len(p), len(s)): s_cnt[ord(s[i]) - ord(&amp;#39;a&amp;#39;)] += 1 s_cnt[ord(s[i - len(p)]) - ord(&amp;#39;a&amp;#39;)] -= 1 if s_cnt == p_cnt: res.</description>
    </item>
    
    <item>
      <title>49. Group Anagrams</title>
      <link>https://solairerove.github.io/posts/group_anagrams/</link>
      <pubDate>Tue, 24 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/group_anagrams/</guid>
      <description># O(w * n * log(n)) time || O(wn) space def group_anagrams(self, strs: List[str]) -&amp;gt; List[List[str]]: dic = collections.defaultdict(list) for s in strs: dic[tuple(sorted(s))].append(s) return list(dic.values()) # O(n * m) time || O(n * m) space, # m - number of strings # n - average number of letters def group_anagrams_count_approach(self, strs: List[str]) -&amp;gt; List[List[str]]: def get_key(s): cnt = [0] * 26 for c in s: cnt[ord(c) - ord(&amp;#39;a&amp;#39;)] += 1 return tuple(cnt) dic = collections.</description>
    </item>
    
    <item>
      <title>1011. Capacity To Ship Packages Within D Days</title>
      <link>https://solairerove.github.io/posts/capacity_to_ship_packages_within_d_days/</link>
      <pubDate>Mon, 23 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/capacity_to_ship_packages_within_d_days/</guid>
      <description># O(n * log(n)) time || O(1) space def ship_within_days(self, weights: List[int], days: int) -&amp;gt; int: low, high = max(weights), sum(weights) while low &amp;lt;= high: mid = low + (high - low) // 2 days_required, curr_weight = 1, 0 for weight in weights: if curr_weight + weight &amp;lt;= mid: curr_weight += weight else: days_required, curr_weight = days_required + 1, weight if days_required &amp;lt;= days: high = mid - 1 else: low = mid + 1 return low Determine the search space: The minimum possible weight capacity of the ship would be the maximum weight among all the packages, and the maximum possible weight capacity of the ship would be the sum of all the package weights.</description>
    </item>
    
    <item>
      <title>875. Koko Eating Bananas</title>
      <link>https://solairerove.github.io/posts/koko_eating_bananas/</link>
      <pubDate>Mon, 23 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/koko_eating_bananas/</guid>
      <description># O(n * log(max(p)) time || O(1) space def min_eating_speed(self, piles: List[int], h: int) -&amp;gt; int: low, high = 1, max(piles) while low &amp;lt; high: mid = low + (high - low) // 2 if sum(math.ceil(pile / mid) for pile in piles) &amp;lt;= h: high = mid else: low = mid + 1 return high if the current speed is workable, the minimum workable speed should be on its left inclusively.</description>
    </item>
    
    <item>
      <title>153. Find Minimum in Rotated Sorted Array</title>
      <link>https://solairerove.github.io/posts/find_minimum_in_rotated_sorted_array/</link>
      <pubDate>Sun, 22 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/find_minimum_in_rotated_sorted_array/</guid>
      <description># O(log(n)) time || O(1) space def find_min(self, nums: List[int]) -&amp;gt; int: low, high = 0, len(nums) - 1 while low &amp;lt; high: mid = low + (high - low) // 2 if nums[mid] &amp;gt; nums[high]: low = mid + 1 else: high = mid return nums[high] array might be offset but still is sorted. use binary search, take in consider in which part to have a search. if mid element bigger than last one, low border is mid + 1</description>
    </item>
    
    <item>
      <title>33. Search in Rotated Sorted Array</title>
      <link>https://solairerove.github.io/posts/search_in_rotated_sorted_array/</link>
      <pubDate>Sun, 22 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/search_in_rotated_sorted_array/</guid>
      <description># O(log(n)) time || O(1) space def search(self, nums: List[int], target: int) -&amp;gt; int: low, high = 0, len(nums) - 1 while low &amp;lt;= high: mid = low + (high - low) // 2 if target == nums[mid]: return mid if nums[low] &amp;lt;= nums[mid]: if nums[low] &amp;lt;= target &amp;lt;= nums[mid]: high = mid - 1 else: low = mid + 1 else: if nums[mid] &amp;lt;= target &amp;lt;= nums[high]: low = mid + 1 else: high = mid - 1 return -1 array might be offset but still is sorted.</description>
    </item>
    
    <item>
      <title>81. Search in Rotated Sorted Array II</title>
      <link>https://solairerove.github.io/posts/search_in_rotated_sorted_array_ii/</link>
      <pubDate>Sun, 22 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/search_in_rotated_sorted_array_ii/</guid>
      <description># O(log(n)) time || O(1) space def search(self, nums: List[int], target: int) -&amp;gt; bool: low, high = 0, len(nums) - 1 while low &amp;lt;= high: mid = low + (high - low) // 2 if target == nums[mid]: return True while low &amp;lt; mid and nums[low] == nums[mid]: low += 1 if nums[low] &amp;lt;= nums[mid]: if nums[low] &amp;lt;= target &amp;lt;= nums[mid]: high = mid - 1 else: low = mid + 1 else: if nums[mid] &amp;lt;= target &amp;lt;= nums[high]: low = mid + 1 else: high = mid - 1 return False array might be offset but still is sorted.</description>
    </item>
    
    <item>
      <title>74. Search a 2D Matrix</title>
      <link>https://solairerove.github.io/posts/search_a_2d_matrix/</link>
      <pubDate>Fri, 20 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/search_a_2d_matrix/</guid>
      <description># O(log(m * n)) time || O(1) space def search_matrix(self, matrix: List[List[int]], target: int) -&amp;gt; bool: rows, cols = len(matrix), len(matrix[0]) low, high = 0, rows * cols - 1 while low &amp;lt;= high: mid = low + (high - low) // 2 mid_row, mid_col = divmod(mid, cols) if target == matrix[mid_row][mid_col]: return True elif target &amp;lt; matrix[mid_row][mid_col]: high = mid - 1 else: low = mid + 1 return False to get midpoint in the matrix, we use the divmod function with mid and cols</description>
    </item>
    
    <item>
      <title>2. Add Two Numbers</title>
      <link>https://solairerove.github.io/posts/add_two_numbers/</link>
      <pubDate>Wed, 18 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/add_two_numbers/</guid>
      <description># O(max(n, m)) time || O(1) space def add_two_numbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -&amp;gt; Optional[ListNode]: sentinel = ListNode() prev = sentinel hold = 0 while l1 or l2: curr_sum = 0 if l1: curr_sum, l1 = curr_sum + l1.val, l1.next if l2: curr_sum, l2 = curr_sum + l2.val, l2.next curr_sum += hold prev.next, hold = ListNode(curr_sum % 10), curr_sum // 10 prev = prev.next if hold: prev.next = ListNode(hold) return sentinel.</description>
    </item>
    
    <item>
      <title>11. Container With Most Water</title>
      <link>https://solairerove.github.io/posts/container_with_most_water/</link>
      <pubDate>Mon, 20 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/container_with_most_water/</guid>
      <description># O(n) time || O(1) space def max_area(self, height: List[int]) -&amp;gt; int: area, low, high = 0, 0, len(height) - 1 while low &amp;lt; high: area = max(area, min(height[low], height[high]) * (high - low)) if height[low] &amp;lt;= height[high]: low += 1 else: high -= 1 return area </description>
    </item>
    
  </channel>
</rss>
