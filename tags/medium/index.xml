<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>medium on Headstone lamp - leetcode grind (54)</title>
    <link>https://solairerove.github.io/tags/medium/</link>
    <description>Recent content in medium on Headstone lamp - leetcode grind (54)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© solairerove</copyright>
    <lastBuildDate>Wed, 22 Nov 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://solairerove.github.io/tags/medium/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>309. Best Time to Buy and Sell Stock with Cooldown</title>
      <link>https://solairerove.github.io/posts/best_time_to_buy_and_sell_stock_with_cooldown/</link>
      <pubDate>Wed, 22 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/best_time_to_buy_and_sell_stock_with_cooldown/</guid>
      <description># O(n) time || O(1) space def max_profit(self, prices: List[int]) -&amp;gt; int: buy, sell, cooldown = -prices[0], 0, 0 for price in prices[1:]: _buy = max(buy, cooldown - price) _sell = buy + price _cooldown = max(cooldown, sell) buy, sell, cooldown = _buy, _sell, _cooldown return max(sell, cooldown) For this LeetCode problem, the challenge is to find the maximum profit from buying and selling stocks with a constraint: after selling a stock, you must have a cooldown period of one day before you can buy again.</description>
    </item>
    
    <item>
      <title>714. Best Time to Buy and Sell Stock with Transaction Fee</title>
      <link>https://solairerove.github.io/posts/best_time_to_buy_and_sell_stock_with_transaction_fee/</link>
      <pubDate>Wed, 22 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/best_time_to_buy_and_sell_stock_with_transaction_fee/</guid>
      <description># O(n) time || O(1) space def max_profit(self, prices: List[int], fee: int) -&amp;gt; int: res, hold = 0, -prices[0] for price in prices[1:]: res = max(res, hold + price - fee) hold = max(hold, res - price) return res A dynamic programming approach can be efficient here. The idea is to keep track of two variables at each step:
Cash: The maximum profit we can have if we don&amp;rsquo;t hold a stock at the end of day i.</description>
    </item>
    
    <item>
      <title>122. Best Time to Buy and Sell Stock II</title>
      <link>https://solairerove.github.io/posts/best_time_to_buy_and_sell_stock_ii/</link>
      <pubDate>Tue, 21 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/best_time_to_buy_and_sell_stock_ii/</guid>
      <description># O(n) time || O(1) space def max_profit(self, prices: List[int]) -&amp;gt; int: res = 0 for i in range(1, len(prices)): if prices[i] &amp;gt; prices[i - 1]: res += prices[i] - prices[i - 1] return res # O(n) time || O(1) space def max_profit_lambda(self, prices: List[int]) -&amp;gt; int: return reduce(lambda profit, i: profit + max(prices[i] - prices[i - 1], 0), range(1, len(prices)), 0) This LeetCode problem asks for the maximum profit that can be achieved by buying and selling stocks, with the possibility of conducting multiple transactions.</description>
    </item>
    
    <item>
      <title>1838. Frequency of the Most Frequent Element</title>
      <link>https://solairerove.github.io/posts/frequency_of_the_most_frequent_element/</link>
      <pubDate>Sat, 18 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/frequency_of_the_most_frequent_element/</guid>
      <description># O(n * log(n)) time | O(log(n)) space def max_frequency(self, nums: List[int], k: int) -&amp;gt; int: nums.sort() low, res, total = 0, 0, 0 for high in range(len(nums)): total += nums[high] while nums[high] * (high - low + 1) - total &amp;gt; k: total -= nums[low] low += 1 res = max(res, high - low + 1) return res To solve this problem, we can use a sliding window approach. The idea is to find the longest subarray in which the difference between the maximum element and the minimum element (after incrementing any element up to k times) is at most k.</description>
    </item>
    
    <item>
      <title>113. Path Sum II</title>
      <link>https://solairerove.github.io/posts/path_sum_ii/</link>
      <pubDate>Thu, 16 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/path_sum_ii/</guid>
      <description># O(n) time || O(max(n, log(n)) space def path_sum_rec(self, root: Optional[TreeNode], target_sum: int) -&amp;gt; List[List[int]]: if not root: return [] res = [] def dfs(node, curr_sum, curr_path): if not node: return curr_sum += node.val curr_path.append(node.val) if not node.left and not node.right and curr_sum == target_sum: res.append(list(curr_path)) dfs(node.left, curr_sum, curr_path) dfs(node.right, curr_sum, curr_path) curr_path.pop() dfs(root, 0, []) return res # O(n) time || O(max(n, log(n)) space def path_sum_dfs(self, root: Optional[TreeNode], target_sum: int) -&amp;gt; List[List[int]]: if not root: return [] res = [] stack = [(root, root.</description>
    </item>
    
    <item>
      <title>424. Longest Repeating Character Replacement</title>
      <link>https://solairerove.github.io/posts/longest_repeating_character_replacement/</link>
      <pubDate>Fri, 10 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/longest_repeating_character_replacement/</guid>
      <description># O(n) time | O(1) space def character_replacement(self, s: str, k: int) -&amp;gt; int: freq, max_freq, res = collections.defaultdict(int), 0, 0 low = 0 for high in range(len(s)): freq[s[high]] += 1 max_freq = max(max_freq, freq[s[high]]) if (high - low + 1) - max_freq &amp;gt; k: freq[s[low]] -= 1 low += 1 res = max(res, high - low + 1) return res Detailed Explanation: Initialize Variables: freq: A dictionary to store the frequency of each character in the current window.</description>
    </item>
    
    <item>
      <title>763. Partition Labels</title>
      <link>https://solairerove.github.io/posts/partition_labels/</link>
      <pubDate>Mon, 06 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/partition_labels/</guid>
      <description># O(n) time || O(1) space def partition_labels(self, s: str) -&amp;gt; List[int]: last_occurrence = {c: i for i, c in enumerate(s)} res = [] low = high = 0 for i, c in enumerate(s): high = max(high, last_occurrence[c]) if i == high: res.append(high - low + 1) low = high + 1 return res This problem, often referred to as &amp;ldquo;Partition Labels&amp;rdquo; on LeetCode, requires us to split the string into the maximum number of parts such that no letter appears in more than one part.</description>
    </item>
    
    <item>
      <title>692. Top K Frequent Words</title>
      <link>https://solairerove.github.io/posts/top_k_frequent_words/</link>
      <pubDate>Fri, 03 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/top_k_frequent_words/</guid>
      <description>sorting to obtain the top k frequent words in O(n + m * log(m)) time.
# O(n + m * log(m)) time || O(m) space # n is number of words in list # m is number of unique words # k is number of top freq words def top_k_frequent_sorting(self, words: List[str], k: int) -&amp;gt; List[str]: cnt = collections.Counter(words) return sorted(cnt, key=lambda word: (-cnt[word], word))[:k] heapq library to obtain the top k frequent words in O(n + k * log(m)) time.</description>
    </item>
    
    <item>
      <title>1985. Find the Kth Largest Integer in the Array</title>
      <link>https://solairerove.github.io/posts/find_the_kth_largest_integer_in_the_array/</link>
      <pubDate>Thu, 02 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/find_the_kth_largest_integer_in_the_array/</guid>
      <description>Use Python&amp;rsquo;s heapq library to obtain the kth largest number in O(n * log(k * m)) time.
# O(n * log(k * m)) time || O(k) space # n is len of nums # m is len of each num # k is k def kth_largest_number_heap(self, nums: List[str], k: int) -&amp;gt; str: heap = [] for num in nums: heapq.heappush(heap, int(num)) if len(heap) &amp;gt; k: heapq.heappop(heap) return str(heap[0]) Quickselect with optimisations.</description>
    </item>
    
    <item>
      <title>215. Kth Largest Element in an Array</title>
      <link>https://solairerove.github.io/posts/kth_largest_element_in_an_array/</link>
      <pubDate>Thu, 02 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/kth_largest_element_in_an_array/</guid>
      <description>Use Python&amp;rsquo;s heapq library to obtain the k largest number in O(nlogk) time.
# O(n * log(k)) time || O(k) space def find_kth_largest_heap(self, nums: List[int], k: int) -&amp;gt; int: return heapq.nlargest(k, nums)[-1] Quickselect with optimisations. Works very slow on leetcode cases. Maybe median of medians will help.
# O(max(n, n^2) time || O(1) space def find_kth_largest_quickselect(self, nums: List[int], k: int) -&amp;gt; int: return quickselect(nums, 0, len(nums) - 1, len(nums) - k) # nums[len(nums) - k] def quickselect(arr, low, high, k): if low == high: return arr[low] lt, gt = partition(arr, low, high, random.</description>
    </item>
    
    <item>
      <title>347. Top K Frequent Elements</title>
      <link>https://solairerove.github.io/posts/top_k_frequent_elements/</link>
      <pubDate>Thu, 02 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/top_k_frequent_elements/</guid>
      <description>Quickselect Explained: Quickselect is a cousin of the quicksort algorithm. The idea behind quickselect is to find the k-th smallest (or largest) element without having to sort the entire list.
Steps of Quickselect: Choose a &amp;lsquo;pivot&amp;rsquo; element from the list and partition the other elements into two sub-arrays, according to whether they are less than or greater than the pivot. Reorder the list so that all elements less than the pivot come before (in no particular order) and all elements greater than the pivot come after it (also in no particular order).</description>
    </item>
    
    <item>
      <title>75. Sort Colors</title>
      <link>https://solairerove.github.io/posts/sort_colors/</link>
      <pubDate>Thu, 02 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/sort_colors/</guid>
      <description># O(n) time || O(1) space def sort_colors(self, nums: List[int]) -&amp;gt; None: lt, i, gt = 0, 0, len(nums) - 1 while i &amp;lt;= gt: if nums[i] == 0: nums[i], nums[lt] = nums[lt], nums[i] i, lt = i + 1, lt + 1 elif nums[i] == 2: nums[i], nums[gt] = nums[gt], nums[i] gt -= 1 else: i += 1 This is the famous &amp;ldquo;Dutch National Flag&amp;rdquo; problem. One common way to solve this problem is using a three-pointer approach.</description>
    </item>
    
    <item>
      <title>253. Meeting Rooms II</title>
      <link>https://solairerove.github.io/posts/meeting_rooms_ii/</link>
      <pubDate>Mon, 30 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/meeting_rooms_ii/</guid>
      <description># O(n * log(n)) time || O(n) space def min_meeting_rooms(self, intervals: List[List[int]]) -&amp;gt; int: start_times = sorted([i[0] for i in intervals]) end_times = sorted([i[1] for i in intervals]) res = 0 start, end = 0, 0 while start &amp;lt; len(intervals): if start_times[start] &amp;gt;= end_times[end]: res, end = res - 1, end + 1 res, start = res + 1, start + 1 return res To solve this problem, we can think of the start and end times of the intervals as events.</description>
    </item>
    
    <item>
      <title>435. Non-overlapping Intervals</title>
      <link>https://solairerove.github.io/posts/non_overlapping_intervals/</link>
      <pubDate>Mon, 30 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/non_overlapping_intervals/</guid>
      <description># O(n * log(n)) time || O(log(n)) space def erase_overlap_intervals(self, intervals: List[List[int]]) -&amp;gt; int: intervals.sort(key=lambda x: x[1]) res = 0 end = intervals[0][1] for interval in intervals[1:]: if interval[0] &amp;lt; end: res += 1 else: end = interval[1] return res To solve this problem, we can take a greedy approach. The intuition is that if we choose intervals that end early, it gives us more room for subsequent intervals to fit without overlapping.</description>
    </item>
    
    <item>
      <title>5. Longest Palindromic Substring</title>
      <link>https://solairerove.github.io/posts/longest_palindromic_substring/</link>
      <pubDate>Fri, 27 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/longest_palindromic_substring/</guid>
      <description># O(n^2) time || O(1) space def longest_palindrome(self, s: str) -&amp;gt; str: def expand(i, j): while i &amp;gt;= 0 and j &amp;lt; len(s) and s[i] == s[j]: i, j = i - 1, j + 1 return s[i + 1: j] return max([expand(i, j) for i in range(len(s)) for j in (i, i + 1)], key=len) This problem can be solved using several methods. A common approach is to expand around the center.</description>
    </item>
    
    <item>
      <title>56. Merge Intervals</title>
      <link>https://solairerove.github.io/posts/merge_intervals/</link>
      <pubDate>Fri, 27 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/merge_intervals/</guid>
      <description># O(n * log(n)) time || O(n) space def merge(self, intervals: List[List[int]]) -&amp;gt; List[List[int]]: intervals.sort(key=lambda x: x[0]) res = [intervals[0]] for i in range(1, len(intervals)): if intervals[i][0] &amp;gt; res[-1][1]: res.append(intervals[i]) else: res[-1][1] = max(res[-1][1], intervals[i][1]) return res This is a classic interval problem. The idea is to first sort the intervals based on their start times. After sorting, you can then iterate over the sorted intervals and merge those that overlap.</description>
    </item>
    
    <item>
      <title>200. Number of Islands</title>
      <link>https://solairerove.github.io/posts/number_of_islands/</link>
      <pubDate>Thu, 26 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/number_of_islands/</guid>
      <description># O(n * m) time || O(n * m) space def num_islands_dfs(self, grid: List[List[str]]) -&amp;gt; int: n, m = len(grid), len(grid[0]) def dfs(i, j): if 0 &amp;lt;= i &amp;lt; n and 0 &amp;lt;= j &amp;lt; m and grid[i][j] == &amp;#34;1&amp;#34;: grid[i][j] = &amp;#34;0&amp;#34; dfs(i - 1, j) dfs(i + 1, j) dfs(i, j - 1) dfs(i, j + 1) res = 0 for i in range(n): for j in range(m): if grid[i][j] == &amp;#34;1&amp;#34;: res += 1 dfs(i, j) return res # O(n * m) time || O(n * m) space def num_islands_dfs_shorter(self, grid: List[List[str]]) -&amp;gt; int: n, m = len(grid), len(grid[0]) def dfs(i, j): if 0 &amp;lt;= i &amp;lt; n and 0 &amp;lt;= j &amp;lt; m and grid[i][j] == &amp;#34;1&amp;#34;: grid[i][j] = &amp;#34;0&amp;#34; list(map(dfs, [i - 1, i + 1, i, i], [j, j, j - 1, j + 1])) res = 0 for i in range(n): for j in range(m): if grid[i][j] == &amp;#34;1&amp;#34;: res += 1 dfs(i, j) return res # O(n * m) time || O(min(n, m)) space def num_islands_bfs(self, grid: List[List[str]]) -&amp;gt; int: n, m = len(grid), len(grid[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] def bfs(i, j): dq = collections.</description>
    </item>
    
    <item>
      <title>15. 3Sum</title>
      <link>https://solairerove.github.io/posts/three_sum/</link>
      <pubDate>Tue, 24 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/three_sum/</guid>
      <description># O(n^2) time || O(1) space def three_sum(self, nums: List[int]) -&amp;gt; List[List[int]]: nums.sort() res = [] for i in range(len(nums) - 2): if i &amp;gt; 0 and nums[i] == nums[i - 1]: continue low, high = i + 1, len(nums) - 1 while low &amp;lt; high: _sum = nums[i] + nums[low] + nums[high] if _sum == 0: res.append([nums[i], nums[low], nums[high]]) low, high = low + 1, high - 1 while low &amp;lt; high and nums[low] == nums[low - 1]: low += 1 while low &amp;lt; high and nums[high] == nums[high + 1]: high -= 1 elif _sum &amp;lt; 0: low += 1 else: high -= 1 return res You can solve this problem using a sorting-based approach combined with the two-pointer technique.</description>
    </item>
    
    <item>
      <title>18. 4Sum</title>
      <link>https://solairerove.github.io/posts/four_sum/</link>
      <pubDate>Tue, 24 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/four_sum/</guid>
      <description># O(n^3) time || O(1) space def four_sum(self, nums: List[int], target: int) -&amp;gt; List[List[int]]: nums.sort() res = [] for i in range(len(nums) - 3): if i &amp;gt; 0 and nums[i] == nums[i - 1]: continue for j in range(i + 1, len(nums) - 2): if j &amp;gt; i + 1 and nums[j] == nums[j - 1]: continue low, high = j + 1, len(nums) - 1 while low &amp;lt; high: _sum = nums[i] + nums[j] + nums[low] + nums[high] if _sum == target: res.</description>
    </item>
    
    <item>
      <title>438. Find All Anagrams in a String</title>
      <link>https://solairerove.github.io/posts/find_all_anagrams_in_a_string/</link>
      <pubDate>Tue, 24 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/find_all_anagrams_in_a_string/</guid>
      <description># O(n) time | O(1) space def find_anagrams(self, s: str, p: str) -&amp;gt; List[int]: s_cnt, p_cnt = [0] * 26, [0] * 26 for c in s[:len(p)]: s_cnt[ord(c) - ord(&amp;#39;a&amp;#39;)] += 1 for c in p: p_cnt[ord(c) - ord(&amp;#39;a&amp;#39;)] += 1 res = [] if s_cnt == p_cnt: res.append(0) for i in range(len(p), len(s)): s_cnt[ord(s[i]) - ord(&amp;#39;a&amp;#39;)] += 1 s_cnt[ord(s[i - len(p)]) - ord(&amp;#39;a&amp;#39;)] -= 1 if s_cnt == p_cnt: res.</description>
    </item>
    
    <item>
      <title>49. Group Anagrams</title>
      <link>https://solairerove.github.io/posts/group_anagrams/</link>
      <pubDate>Tue, 24 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/group_anagrams/</guid>
      <description># O(w * n * log(n)) time || O(wn) space def group_anagrams(self, strs: List[str]) -&amp;gt; List[List[str]]: dic = collections.defaultdict(list) for s in strs: dic[tuple(sorted(s))].append(s) return list(dic.values()) # O(n * m) time || O(n * m) space, # m - number of strings # n - average number of letters def group_anagrams_count_approach(self, strs: List[str]) -&amp;gt; List[List[str]]: def get_key(s): cnt = [0] * 26 for c in s: cnt[ord(c) - ord(&amp;#39;a&amp;#39;)] += 1 return tuple(cnt) dic = collections.</description>
    </item>
    
    <item>
      <title>1011. Capacity To Ship Packages Within D Days</title>
      <link>https://solairerove.github.io/posts/capacity_to_ship_packages_within_d_days/</link>
      <pubDate>Mon, 23 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/capacity_to_ship_packages_within_d_days/</guid>
      <description># O(n * log(n)) time || O(1) space def ship_within_days(self, weights: List[int], days: int) -&amp;gt; int: low, high = max(weights), sum(weights) while low &amp;lt;= high: mid = low + (high - low) // 2 days_required, curr_weight = 1, 0 for weight in weights: if curr_weight + weight &amp;lt;= mid: curr_weight += weight else: days_required, curr_weight = days_required + 1, weight if days_required &amp;lt;= days: high = mid - 1 else: low = mid + 1 return low Determine the search space: The minimum possible weight capacity of the ship would be the maximum weight among all the packages, and the maximum possible weight capacity of the ship would be the sum of all the package weights.</description>
    </item>
    
    <item>
      <title>875. Koko Eating Bananas</title>
      <link>https://solairerove.github.io/posts/koko_eating_bananas/</link>
      <pubDate>Mon, 23 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/koko_eating_bananas/</guid>
      <description># O(n * log(max(p)) time || O(1) space def min_eating_speed(self, piles: List[int], h: int) -&amp;gt; int: low, high = 1, max(piles) while low &amp;lt; high: mid = low + (high - low) // 2 if sum(math.ceil(pile / mid) for pile in piles) &amp;lt;= h: high = mid else: low = mid + 1 return high if the current speed is workable, the minimum workable speed should be on its left inclusively.</description>
    </item>
    
    <item>
      <title>153. Find Minimum in Rotated Sorted Array</title>
      <link>https://solairerove.github.io/posts/find_minimum_in_rotated_sorted_array/</link>
      <pubDate>Sun, 22 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/find_minimum_in_rotated_sorted_array/</guid>
      <description># O(log(n)) time || O(1) space def find_min(self, nums: List[int]) -&amp;gt; int: low, high = 0, len(nums) - 1 while low &amp;lt; high: mid = low + (high - low) // 2 if nums[mid] &amp;gt; nums[high]: low = mid + 1 else: high = mid return nums[high] array might be offset but still is sorted. use binary search, take in consider in which part to have a search. if mid element bigger than last one, low border is mid + 1</description>
    </item>
    
    <item>
      <title>33. Search in Rotated Sorted Array</title>
      <link>https://solairerove.github.io/posts/search_in_rotated_sorted_array/</link>
      <pubDate>Sun, 22 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/search_in_rotated_sorted_array/</guid>
      <description># O(log(n)) time || O(1) space def search(self, nums: List[int], target: int) -&amp;gt; int: low, high = 0, len(nums) - 1 while low &amp;lt;= high: mid = low + (high - low) // 2 if target == nums[mid]: return mid if nums[low] &amp;lt;= nums[mid]: if nums[low] &amp;lt;= target &amp;lt;= nums[mid]: high = mid - 1 else: low = mid + 1 else: if nums[mid] &amp;lt;= target &amp;lt;= nums[high]: low = mid + 1 else: high = mid - 1 return -1 array might be offset but still is sorted.</description>
    </item>
    
    <item>
      <title>81. Search in Rotated Sorted Array II</title>
      <link>https://solairerove.github.io/posts/search_in_rotated_sorted_array_ii/</link>
      <pubDate>Sun, 22 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/search_in_rotated_sorted_array_ii/</guid>
      <description># O(log(n)) time || O(1) space def search(self, nums: List[int], target: int) -&amp;gt; bool: low, high = 0, len(nums) - 1 while low &amp;lt;= high: mid = low + (high - low) // 2 if target == nums[mid]: return True while low &amp;lt; mid and nums[low] == nums[mid]: low += 1 if nums[low] &amp;lt;= nums[mid]: if nums[low] &amp;lt;= target &amp;lt;= nums[mid]: high = mid - 1 else: low = mid + 1 else: if nums[mid] &amp;lt;= target &amp;lt;= nums[high]: low = mid + 1 else: high = mid - 1 return False array might be offset but still is sorted.</description>
    </item>
    
    <item>
      <title>74. Search a 2D Matrix</title>
      <link>https://solairerove.github.io/posts/search_a_2d_matrix/</link>
      <pubDate>Fri, 20 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/search_a_2d_matrix/</guid>
      <description># O(log(m * n)) time || O(1) space def search_matrix(self, matrix: List[List[int]], target: int) -&amp;gt; bool: rows, cols = len(matrix), len(matrix[0]) low, high = 0, rows * cols - 1 while low &amp;lt;= high: mid = low + (high - low) // 2 mid_row, mid_col = divmod(mid, cols) if target == matrix[mid_row][mid_col]: return True elif target &amp;lt; matrix[mid_row][mid_col]: high = mid - 1 else: low = mid + 1 return False to get midpoint in the matrix, we use the divmod function with mid and cols</description>
    </item>
    
    <item>
      <title>2. Add Two Numbers</title>
      <link>https://solairerove.github.io/posts/add_two_numbers/</link>
      <pubDate>Wed, 18 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/add_two_numbers/</guid>
      <description># O(max(n, m)) time || O(1) space def add_two_numbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -&amp;gt; Optional[ListNode]: sentinel = ListNode() prev = sentinel hold = 0 while l1 or l2: curr_sum = 0 if l1: curr_sum, l1 = curr_sum + l1.val, l1.next if l2: curr_sum, l2 = curr_sum + l2.val, l2.next curr_sum += hold prev.next, hold = ListNode(curr_sum % 10), curr_sum // 10 prev = prev.next if hold: prev.next = ListNode(hold) return sentinel.</description>
    </item>
    
    <item>
      <title>11. Container With Most Water</title>
      <link>https://solairerove.github.io/posts/container_with_most_water/</link>
      <pubDate>Mon, 20 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/container_with_most_water/</guid>
      <description># O(n) time || O(1) space def max_area(self, height: List[int]) -&amp;gt; int: res, low, high = 0, 0, len(height) - 1 while low &amp;lt; high: res = max(res, (high - low) * (min(height[low], height[high]))) if height[low] &amp;lt;= height[high]: low += 1 else: high -= 1 return res This problem is known as the &amp;ldquo;Container With Most Water&amp;rdquo; and is a well-known example of a two-pointer technique.
Here&amp;rsquo;s the strategy to solve it:</description>
    </item>
    
  </channel>
</rss>
