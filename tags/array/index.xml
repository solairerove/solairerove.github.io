<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>array on Headstone lamp - leetcode grind (48)</title>
    <link>https://solairerove.github.io/tags/array/</link>
    <description>Recent content in array on Headstone lamp - leetcode grind (48)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© solairerove</copyright>
    <lastBuildDate>Wed, 22 Nov 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://solairerove.github.io/tags/array/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>309. Best Time to Buy and Sell Stock with Cooldown</title>
      <link>https://solairerove.github.io/posts/best_time_to_buy_and_sell_stock_with_cooldown/</link>
      <pubDate>Wed, 22 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/best_time_to_buy_and_sell_stock_with_cooldown/</guid>
      <description># O(n) time || O(1) space def max_profit(self, prices: List[int]) -&amp;gt; int: buy, sell, cooldown = -prices[0], 0, 0 for price in prices[1:]: _buy = max(buy, cooldown - price) _sell = buy + price _cooldown = max(cooldown, sell) buy, sell, cooldown = _buy, _sell, _cooldown return max(sell, cooldown) For this LeetCode problem, the challenge is to find the maximum profit from buying and selling stocks with a constraint: after selling a stock, you must have a cooldown period of one day before you can buy again.</description>
    </item>
    
    <item>
      <title>714. Best Time to Buy and Sell Stock with Transaction Fee</title>
      <link>https://solairerove.github.io/posts/best_time_to_buy_and_sell_stock_with_transaction_fee/</link>
      <pubDate>Wed, 22 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/best_time_to_buy_and_sell_stock_with_transaction_fee/</guid>
      <description># O(n) time || O(1) space def max_profit(self, prices: List[int], fee: int) -&amp;gt; int: res, hold = 0, -prices[0] for price in prices[1:]: res = max(res, hold + price - fee) hold = max(hold, res - price) return res A dynamic programming approach can be efficient here. The idea is to keep track of two variables at each step:
Cash: The maximum profit we can have if we don&amp;rsquo;t hold a stock at the end of day i.</description>
    </item>
    
    <item>
      <title>121. Best Time to Buy and Sell Stock</title>
      <link>https://solairerove.github.io/posts/best_time_to_buy_and_sell_stock/</link>
      <pubDate>Tue, 21 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/best_time_to_buy_and_sell_stock/</guid>
      <description># O(n) time || O(1) space def max_profit(self, prices: List[int]) -&amp;gt; int: min_price, res = prices[0], 0 for price in prices[1:]: if price &amp;lt; min_price: min_price = price else: res = max(res, price - min_price) return res # O(n) time || O(1) space def max_profit_lambda(self, prices: List[int]) -&amp;gt; int: return reduce(lambda acc, price: (min(acc[0], price), max(acc[1], price - acc[0])), prices[1:], (prices[0], 0))[1] The idea is to find the maximum difference between two numbers in the array where the smaller number comes before the larger number.</description>
    </item>
    
    <item>
      <title>122. Best Time to Buy and Sell Stock II</title>
      <link>https://solairerove.github.io/posts/best_time_to_buy_and_sell_stock_ii/</link>
      <pubDate>Tue, 21 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/best_time_to_buy_and_sell_stock_ii/</guid>
      <description># O(n) time || O(1) space def max_profit(self, prices: List[int]) -&amp;gt; int: res = 0 for i in range(1, len(prices)): if prices[i] &amp;gt; prices[i - 1]: res += prices[i] - prices[i - 1] return res # O(n) time || O(1) space def max_profit_lambda(self, prices: List[int]) -&amp;gt; int: return reduce(lambda profit, i: profit + max(prices[i] - prices[i - 1], 0), range(1, len(prices)), 0) This LeetCode problem asks for the maximum profit that can be achieved by buying and selling stocks, with the possibility of conducting multiple transactions.</description>
    </item>
    
    <item>
      <title>1838. Frequency of the Most Frequent Element</title>
      <link>https://solairerove.github.io/posts/frequency_of_the_most_frequent_element/</link>
      <pubDate>Sat, 18 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/frequency_of_the_most_frequent_element/</guid>
      <description># O(n * log(n)) time | O(log(n)) space def max_frequency(self, nums: List[int], k: int) -&amp;gt; int: nums.sort() low, res, total = 0, 0, 0 for high in range(len(nums)): total += nums[high] while nums[high] * (high - low + 1) - total &amp;gt; k: total -= nums[low] low += 1 res = max(res, high - low + 1) return res To solve this problem, we can use a sliding window approach. The idea is to find the longest subarray in which the difference between the maximum element and the minimum element (after incrementing any element up to k times) is at most k.</description>
    </item>
    
    <item>
      <title>239. Sliding Window Maximum</title>
      <link>https://solairerove.github.io/posts/sliding_window_maximum/</link>
      <pubDate>Tue, 07 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/sliding_window_maximum/</guid>
      <description># O(n) time | O(k) space def max_sliding_window(self, nums: List[int], k: int) -&amp;gt; List[int]: res = [] dq = collections.deque() for i, n in enumerate(nums): if dq and dq[0] &amp;lt; i - k + 1: dq.popleft() while dq and nums[dq[-1]] &amp;lt;= n: dq.pop() dq.append(i) if i &amp;gt;= k - 1: res.append(nums[dq[0]]) return res This is a classic sliding window problem that can be efficiently solved using a deque (double-ended queue). The idea is to maintain a deque of candidates in decreasing order and to ensure that the candidates are only from the current sliding window.</description>
    </item>
    
    <item>
      <title>15. 3Sum</title>
      <link>https://solairerove.github.io/posts/three_sum/</link>
      <pubDate>Tue, 24 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/three_sum/</guid>
      <description># O(n^2) time || O(1) space def three_sum(self, nums: List[int]) -&amp;gt; List[List[int]]: nums.sort() triplets = [] for i in range(len(nums) - 2): if i &amp;gt; 0 and nums[i] == nums[i - 1]: continue low, high = i + 1, len(nums) - 1 while low &amp;lt; high: sum_ = nums[i] + nums[low] + nums[high] if sum_ == 0: triplets.append([nums[i], nums[low], nums[high]]) low, high = low + 1, high - 1 while low &amp;lt; high and nums[low] == nums[low - 1]: low += 1 while low &amp;lt; high and nums[high] == nums[high + 1]: high -= 1 elif sum_ &amp;lt; 0: low += 1 else: high -= 1 return triplets You can solve this problem using a sorting-based approach combined with the two-pointer technique.</description>
    </item>
    
    <item>
      <title>18. 4Sum</title>
      <link>https://solairerove.github.io/posts/four_sum/</link>
      <pubDate>Tue, 24 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/four_sum/</guid>
      <description># O(n^3) time || O(1) space def four_sum(self, nums: List[int], target: int) -&amp;gt; List[List[int]]: nums.sort() quadruplets = [] for i in range(len(nums) - 3): if i &amp;gt; 0 and nums[i] == nums[i - 1]: continue for j in range(i + 1, len(nums) - 2): if j &amp;gt; i + 1 and nums[j] == nums[j - 1]: continue low, high = j + 1, len(nums) - 1 while low &amp;lt; high: sum_ = nums[i] + nums[j] + nums[low] + nums[high] if sum_ == target: quadruplets.</description>
    </item>
    
    <item>
      <title>242. Valid Anagram</title>
      <link>https://solairerove.github.io/posts/valid_anagram/</link>
      <pubDate>Tue, 24 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/valid_anagram/</guid>
      <description># O(n) time || O(1) space def is_anagram(self, s: str, t: str) -&amp;gt; bool: if len(s) != len(t): return False cnt = [0] * 26 for i in range(len(s)): cnt[ord(s[i]) - ord(&amp;#39;a&amp;#39;)] += 1 cnt[ord(t[i]) - ord(&amp;#39;a&amp;#39;)] -= 1 return max(cnt) == 0 # O(n) time || O(n) space def is_anagram_counter(self, s: str, t: str) -&amp;gt; bool: return collections.Counter(s) == collections.Counter(t) Efficient method is to count the occurrences of each character in both strings and then compare the counts.</description>
    </item>
    
    <item>
      <title>409. Longest Palindrome</title>
      <link>https://solairerove.github.io/posts/longest_palindrome/</link>
      <pubDate>Tue, 24 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/longest_palindrome/</guid>
      <description># O(n) time | O(1) space def longest_palindrome(self, s: str) -&amp;gt; int: odds = sum(v % 2 for v in collections.Counter(s).values()) return len(s) - odds + bool(odds) Count Occurrences: Counter(s) provides the counts of each character. Calculate Odds: We determine how many characters have an odd count. Result: The potential length of the palindrome is len(s) - odds, but if there&amp;rsquo;s any character with an odd count (bool(odds) will be True for any positive odd value), we can use one of them as the center of the palindrome.</description>
    </item>
    
    <item>
      <title>438. Find All Anagrams in a String</title>
      <link>https://solairerove.github.io/posts/find_all_anagrams_in_a_string/</link>
      <pubDate>Tue, 24 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/find_all_anagrams_in_a_string/</guid>
      <description># O(n) time | O(1) space def find_anagrams(self, s: str, p: str) -&amp;gt; List[int]: s_cnt, p_cnt = [0] * 26, [0] * 26 for c in s[:len(p)]: s_cnt[ord(c) - ord(&amp;#39;a&amp;#39;)] += 1 for c in p: p_cnt[ord(c) - ord(&amp;#39;a&amp;#39;)] += 1 res = [] if s_cnt == p_cnt: res.append(0) for i in range(len(p), len(s)): s_cnt[ord(s[i]) - ord(&amp;#39;a&amp;#39;)] += 1 s_cnt[ord(s[i - len(p)]) - ord(&amp;#39;a&amp;#39;)] -= 1 if s_cnt == p_cnt: res.</description>
    </item>
    
    <item>
      <title>49. Group Anagrams</title>
      <link>https://solairerove.github.io/posts/group_anagrams/</link>
      <pubDate>Tue, 24 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/group_anagrams/</guid>
      <description># O(w * n * log(n)) time || O(wn) space def group_anagrams(self, strs: List[str]) -&amp;gt; List[List[str]]: dic = collections.defaultdict(list) for s in strs: dic[tuple(sorted(s))].append(s) return list(dic.values()) # O(n * m) time || O(n * m) space, # m - number of strings # n - average number of letters def group_anagrams_count_approach(self, strs: List[str]) -&amp;gt; List[List[str]]: def get_key(s): cnt = [0] * 26 for c in s: cnt[ord(c) - ord(&amp;#39;a&amp;#39;)] += 1 return tuple(cnt) dic = collections.</description>
    </item>
    
    <item>
      <title>1. Two Sum</title>
      <link>https://solairerove.github.io/posts/two_sum/</link>
      <pubDate>Mon, 23 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/two_sum/</guid>
      <description># O(n) time || O(n) space def two_sum(self, nums: List[int], target: int) -&amp;gt; List[int]: dic = {} for i, num in enumerate(nums): if target - num in dic: return [dic[target - num], i] dic[num] = i In this solution, we use a dictionary dic to store the numbers encountered so far along with their indices. As we iterate through the array, we check if the complement (target - num) exists in the num_map dictionary.</description>
    </item>
    
    <item>
      <title>136. Single Number</title>
      <link>https://solairerove.github.io/posts/single_number/</link>
      <pubDate>Mon, 23 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/single_number/</guid>
      <description># O(n) time || O(1) space def single_number(self, nums: List[int]) -&amp;gt; int: res = 0 for n in nums: res ^= n return res # O(n) time || O(1) space def single_number_reduce(self, nums: List[int]) -&amp;gt; int: return functools.reduce(lambda x, y: x ^ y, nums) To find the element that appears only once in the array with a linear runtime complexity and constant extra space, you can utilize the XOR operator.</description>
    </item>
    
  </channel>
</rss>
