<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dp on Headstone lamp - leetcode grind (48)</title>
    <link>https://solairerove.github.io/tags/dp/</link>
    <description>Recent content in dp on Headstone lamp - leetcode grind (48)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© solairerove</copyright>
    <lastBuildDate>Wed, 22 Nov 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://solairerove.github.io/tags/dp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>309. Best Time to Buy and Sell Stock with Cooldown</title>
      <link>https://solairerove.github.io/posts/best_time_to_buy_and_sell_stock_with_cooldown/</link>
      <pubDate>Wed, 22 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/best_time_to_buy_and_sell_stock_with_cooldown/</guid>
      <description># O(n) time || O(1) space def max_profit(self, prices: List[int]) -&amp;gt; int: buy, sell, cooldown = -prices[0], 0, 0 for price in prices[1:]: _buy = max(buy, cooldown - price) _sell = buy + price _cooldown = max(cooldown, sell) buy, sell, cooldown = _buy, _sell, _cooldown return max(sell, cooldown) For this LeetCode problem, the challenge is to find the maximum profit from buying and selling stocks with a constraint: after selling a stock, you must have a cooldown period of one day before you can buy again.</description>
    </item>
    
    <item>
      <title>714. Best Time to Buy and Sell Stock with Transaction Fee</title>
      <link>https://solairerove.github.io/posts/best_time_to_buy_and_sell_stock_with_transaction_fee/</link>
      <pubDate>Wed, 22 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/best_time_to_buy_and_sell_stock_with_transaction_fee/</guid>
      <description># O(n) time || O(1) space def max_profit(self, prices: List[int], fee: int) -&amp;gt; int: res, hold = 0, -prices[0] for price in prices[1:]: res = max(res, hold + price - fee) hold = max(hold, res - price) return res A dynamic programming approach can be efficient here. The idea is to keep track of two variables at each step:
Cash: The maximum profit we can have if we don&amp;rsquo;t hold a stock at the end of day i.</description>
    </item>
    
    <item>
      <title>121. Best Time to Buy and Sell Stock</title>
      <link>https://solairerove.github.io/posts/best_time_to_buy_and_sell_stock/</link>
      <pubDate>Tue, 21 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/best_time_to_buy_and_sell_stock/</guid>
      <description># O(n) time || O(1) space def max_profit(self, prices: List[int]) -&amp;gt; int: min_price, res = prices[0], 0 for price in prices[1:]: if price &amp;lt; min_price: min_price = price else: res = max(res, price - min_price) return res # O(n) time || O(1) space def max_profit_lambda(self, prices: List[int]) -&amp;gt; int: return reduce(lambda acc, price: (min(acc[0], price), max(acc[1], price - acc[0])), prices[1:], (prices[0], 0))[1] The idea is to find the maximum difference between two numbers in the array where the smaller number comes before the larger number.</description>
    </item>
    
    <item>
      <title>122. Best Time to Buy and Sell Stock II</title>
      <link>https://solairerove.github.io/posts/best_time_to_buy_and_sell_stock_ii/</link>
      <pubDate>Tue, 21 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/best_time_to_buy_and_sell_stock_ii/</guid>
      <description># O(n) time || O(1) space def max_profit(self, prices: List[int]) -&amp;gt; int: res = 0 for i in range(1, len(prices)): if prices[i] &amp;gt; prices[i - 1]: res += prices[i] - prices[i - 1] return res # O(n) time || O(1) space def max_profit_lambda(self, prices: List[int]) -&amp;gt; int: return reduce(lambda profit, i: profit + max(prices[i] - prices[i - 1], 0), range(1, len(prices)), 0) This LeetCode problem asks for the maximum profit that can be achieved by buying and selling stocks, with the possibility of conducting multiple transactions.</description>
    </item>
    
  </channel>
</rss>
