<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>easy on Headstone lamp - leetcode grind (54)</title>
    <link>https://solairerove.github.io/tags/easy/</link>
    <description>Recent content in easy on Headstone lamp - leetcode grind (54)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© solairerove</copyright>
    <lastBuildDate>Wed, 03 Jan 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://solairerove.github.io/tags/easy/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>125. Valid Palindrome</title>
      <link>https://solairerove.github.io/posts/valid_palindrome/</link>
      <pubDate>Wed, 03 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/valid_palindrome/</guid>
      <description># O(n) time || O(1) space def is_palindrome(self, s: str) -&amp;gt; bool: low, high = 0, len(s) - 1 while low &amp;lt;= high: while low &amp;lt; len(s) - 1 and not s[low].isalnum(): low += 1 while high &amp;gt;= 0 and not s[high].isalnum(): high -= 1 if s[low].lower() != s[high].lower(): return False low, high = low + 1, high - 1 return True </description>
    </item>
    
    <item>
      <title>21. Merge Two Sorted Lists</title>
      <link>https://solairerove.github.io/posts/merge_two_sorted_lists/</link>
      <pubDate>Tue, 02 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/merge_two_sorted_lists/</guid>
      <description># O(n) time || O(1) space def merge_two_lists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -&amp;gt; Optional[ListNode]: sentinel = ListNode(-1) prev = sentinel curr1, curr2 = list1, list2 while curr1 and curr2: if curr1.val &amp;lt;= curr2.val: prev.next, curr1 = curr1, curr1.next else: prev.next, curr2 = curr2, curr2.next prev = prev.next prev.next = curr1 or curr2 return sentinel.next use sentinel for result list. traverse both lists, compare which element is less. set as new node of sentinel list.</description>
    </item>
    
    <item>
      <title>13. Roman to Integer</title>
      <link>https://solairerove.github.io/posts/roman_to_integer/</link>
      <pubDate>Mon, 04 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/roman_to_integer/</guid>
      <description># O(1) time || O(1) space def roman_to_int(self, s: str) -&amp;gt; int: roman = {&amp;#34;I&amp;#34;: 1, &amp;#34;V&amp;#34;: 5, &amp;#34;X&amp;#34;: 10, &amp;#34;L&amp;#34;: 50, &amp;#34;C&amp;#34;: 100, &amp;#34;D&amp;#34;: 500, &amp;#34;M&amp;#34;: 1000, &amp;#34;Z&amp;#34;: 0} res = 0 s = s + &amp;#34;Z&amp;#34; for i in range(1, len(s)): if roman[s[i]] &amp;lt;= roman[s[i - 1]]: res += roman[s[i - 1]] else: res -= roman[s[i - 1]] return res here&amp;rsquo;s trick. start from 1 element. if previous is bigger or equal add prev, in other case subtract it.</description>
    </item>
    
    <item>
      <title>121. Best Time to Buy and Sell Stock</title>
      <link>https://solairerove.github.io/posts/best_time_to_buy_and_sell_stock/</link>
      <pubDate>Tue, 21 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/best_time_to_buy_and_sell_stock/</guid>
      <description># O(n) time || O(1) space def max_profit(self, prices: List[int]) -&amp;gt; int: min_price, max_profit = prices[0], 0 for i in range(1, len(prices)): min_price = min(min_price, prices[i]) max_profit = max(max_profit, prices[i] - min_price) return max_profit # O(n) time || O(1) space def max_profit_lambda(self, prices: List[int]) -&amp;gt; int: return reduce(lambda acc, price: (min(acc[0], price), max(acc[1], price - acc[0])), prices[1:], (prices[0], 0))[1] The idea is to find the maximum difference between two numbers in the array where the smaller number comes before the larger number.</description>
    </item>
    
    <item>
      <title>110. Balanced Binary Tree</title>
      <link>https://solairerove.github.io/posts/balanced_binary_tree/</link>
      <pubDate>Wed, 15 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/balanced_binary_tree/</guid>
      <description># O(n) time || O(n) space def is_balanced(self, root: Optional[TreeNode]) -&amp;gt; bool: def dfs(node): if not node: return 0, True l_height, l_balanced = dfs(node.left) r_height, r_balanced = dfs(node.right) return max(l_height, r_height) + 1, l_balanced and r_balanced and abs(l_height - r_height) &amp;lt;= 1 return dfs(root)[1] # O(n) time || O(n) space def is_balanced_dfs(self, root: Optional[TreeNode]) -&amp;gt; bool: stack = [(root, 0, False)] heights = {} while stack: node, height, visited = stack.</description>
    </item>
    
    <item>
      <title>112. Path Sum</title>
      <link>https://solairerove.github.io/posts/path_sum/</link>
      <pubDate>Wed, 15 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/path_sum/</guid>
      <description># O(n) time || O(max(n, log(n)) space def has_path_sum_rec(self, root: Optional[TreeNode], target_sum: int) -&amp;gt; bool: if not root: return False def dfs(node, curr_sum): if not node: return False curr_sum += node.val if not node.left and not node.right: return curr_sum == target_sum return dfs(node.left, curr_sum) or dfs(node.right, curr_sum) return dfs(root, 0) # O(n) time || O(max(n, log(n)) space def has_path_sum_dfs(self, root: Optional[TreeNode], target_sum: int) -&amp;gt; bool: if not root: return False stack = [(root, root.</description>
    </item>
    
    <item>
      <title>100. Same Tree</title>
      <link>https://solairerove.github.io/posts/same_tree/</link>
      <pubDate>Tue, 14 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/same_tree/</guid>
      <description>To solve this problem, we need to compare two binary trees, p and q, and determine if they are identical. Two binary trees are identical if they have the same structure and their corresponding nodes have the same value.
# O(n) time || O(h) space def is_same_tree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -&amp;gt; bool: if not p and not q: return True if not p or not q or p.val != q.</description>
    </item>
    
    <item>
      <title>101. Symmetric Tree</title>
      <link>https://solairerove.github.io/posts/symmetric_tree/</link>
      <pubDate>Tue, 14 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/symmetric_tree/</guid>
      <description># O(n) time || O(n) space def is_symmetric_rec(self, root: Optional[TreeNode]) -&amp;gt; bool: def is_mirror_tree(node1, node2): if not node1 and not node2: return True if not node1 or not node2 or node1.val != node2.val: return False return is_mirror_tree(node1.left, node2.right) and is_mirror_tree(node1.right, node2.left) return is_mirror_tree(root.left, root.right) # O(n) time || O(n) space def is_symmetric_dfs(self, root: Optional[TreeNode]) -&amp;gt; bool: stack = [(root.left, root.right)] while stack: left, right = stack.pop() if not left and not right: continue if not left or not right or left.</description>
    </item>
    
    <item>
      <title>252. Meeting Rooms</title>
      <link>https://solairerove.github.io/posts/meeting_rooms/</link>
      <pubDate>Mon, 30 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/meeting_rooms/</guid>
      <description># O(n * log(n)) time || O(n) space def can_attend_meetings(self, intervals: List[List[int]]) -&amp;gt; bool: intervals.sort(key=lambda x: x[0]) for i in range(1, len(intervals)): if intervals[i][0] &amp;lt; intervals[i - 1][1]: return False return True # O(n * log(n)) time || O(n) space def can_attend_meetings_shorter(self, intervals: List[List[int]]) -&amp;gt; bool: intervals.sort(key=lambda x: x[0]) return all(intervals[i][0] &amp;gt;= intervals[i - 1][1] for i in range(1, len(intervals))) To determine whether a person can attend all meetings, we need to ensure that no two meetings overlap.</description>
    </item>
    
    <item>
      <title>20. Valid Parentheses</title>
      <link>https://solairerove.github.io/posts/valid_parentheses/</link>
      <pubDate>Thu, 26 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/valid_parentheses/</guid>
      <description># O(n) time || O(n) space def is_valid(self, s: str) -&amp;gt; bool: closed_to_open = {&amp;#39;}&amp;#39;: &amp;#39;{&amp;#39;, &amp;#39;]&amp;#39;: &amp;#39;[&amp;#39;, &amp;#39;)&amp;#39;: &amp;#39;(&amp;#39;} stack = [] for br in s: if br in closed_to_open: if not stack or stack.pop() != closed_to_open[br]: return False else: stack.append(br) return not stack Initialize an empty stack. Traverse the string character by character. For each character: If it&amp;rsquo;s an open bracket (&amp;rsquo;(&amp;rsquo;, &amp;lsquo;{&amp;rsquo;, or &amp;lsquo;[&amp;rsquo;), push it onto the stack.</description>
    </item>
    
    <item>
      <title>977. Squares of a Sorted Array</title>
      <link>https://solairerove.github.io/posts/squares_of_a_sorted_array/</link>
      <pubDate>Thu, 26 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/squares_of_a_sorted_array/</guid>
      <description># O(n) time || O(1) space def sorted_squares(self, nums: List[int]) -&amp;gt; List[int]: res = [0] * len(nums) pos = len(nums) - 1 low, high = 0, len(nums) - 1 while low &amp;lt;= high: if abs(nums[low]) &amp;gt; abs(nums[high]): res[pos] = nums[low] ** 2 low += 1 else: res[pos] = nums[high] ** 2 high -= 1 pos -= 1 return res Given that the array is sorted in non-decreasing order, the negative numbers will be on the left side and the positive numbers on the right.</description>
    </item>
    
    <item>
      <title>242. Valid Anagram</title>
      <link>https://solairerove.github.io/posts/valid_anagram/</link>
      <pubDate>Tue, 24 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/valid_anagram/</guid>
      <description># O(n) time || O(1) space def is_anagram(self, s: str, t: str) -&amp;gt; bool: if len(s) != len(t): return False cnt = [0] * 26 for i in range(len(s)): cnt[ord(s[i]) - ord(&amp;#39;a&amp;#39;)] += 1 cnt[ord(t[i]) - ord(&amp;#39;a&amp;#39;)] -= 1 return max(cnt) == 0 # O(n) time || O(n) space def is_anagram_counter(self, s: str, t: str) -&amp;gt; bool: return collections.Counter(s) == collections.Counter(t) Efficient method is to count the occurrences of each character in both strings and then compare the counts.</description>
    </item>
    
    <item>
      <title>409. Longest Palindrome</title>
      <link>https://solairerove.github.io/posts/longest_palindrome/</link>
      <pubDate>Tue, 24 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/longest_palindrome/</guid>
      <description># O(n) time | O(1) space def longest_palindrome(self, s: str) -&amp;gt; int: odds = sum(v % 2 for v in collections.Counter(s).values()) return len(s) - odds + bool(odds) Count Occurrences: Counter(s) provides the counts of each character. Calculate Odds: We determine how many characters have an odd count. Result: The potential length of the palindrome is len(s) - odds, but if there&amp;rsquo;s any character with an odd count (bool(odds) will be True for any positive odd value), we can use one of them as the center of the palindrome.</description>
    </item>
    
    <item>
      <title>1. Two Sum</title>
      <link>https://solairerove.github.io/posts/two_sum/</link>
      <pubDate>Mon, 23 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/two_sum/</guid>
      <description># O(n) time || O(n) space def two_sum(self, nums: List[int], target: int) -&amp;gt; List[int]: dic = collections.defaultdict(int) for i, num in enumerate(nums): if target - num in dic: return [i, dic[target - num]] dic[num] = i In this solution, we use a dictionary dic to store the numbers encountered so far along with their indices. As we iterate through the array, we check if the complement (target - num) exists in the num_map dictionary.</description>
    </item>
    
    <item>
      <title>136. Single Number</title>
      <link>https://solairerove.github.io/posts/single_number/</link>
      <pubDate>Mon, 23 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/single_number/</guid>
      <description># O(n) time || O(1) space def single_number(self, nums: List[int]) -&amp;gt; int: res = 0 for n in nums: res ^= n return res # O(n) time || O(1) space def single_number_reduce(self, nums: List[int]) -&amp;gt; int: return functools.reduce(lambda x, y: x ^ y, nums) To find the element that appears only once in the array with a linear runtime complexity and constant extra space, you can utilize the XOR operator.</description>
    </item>
    
    <item>
      <title>278. First Bad Version</title>
      <link>https://solairerove.github.io/posts/first_bad_version/</link>
      <pubDate>Fri, 20 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/first_bad_version/</guid>
      <description># The isBadVersion API is already defined for you. # def isBadVersion(version: int) -&amp;gt; bool: # O(log(n)) time || O(1) space def first_bad_version(self, n: int) -&amp;gt; int: low, high = 1, n while low &amp;lt;= high: mid = low + (high - low) // 2 if isBadVersion(mid): high = mid - 1 else: low = mid + 1 return low you can use binary search to decrease count of api calls.</description>
    </item>
    
    <item>
      <title>374. Guess Number Higher or Lower</title>
      <link>https://solairerove.github.io/posts/guess_number_higher_or_lower/</link>
      <pubDate>Fri, 20 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/guess_number_higher_or_lower/</guid>
      <description># @param num, your guess # @return -1 if num is higher than the picked number # 1 if num is lower than the picked number # otherwise return 0 # def guess(num: int) -&amp;gt; int: # O(log(n)) time || O(1) space def guess_number(self, n: int) -&amp;gt; int: low, high = 1, n while low &amp;lt;= high: mid = low + (high - low) // 2 cmp = guess(mid) if cmp == 0: return mid elif cmp == -1: high = mid - 1 else: low = mid + 1 you can use binary search to decrease count of api calls.</description>
    </item>
    
    <item>
      <title>704. Binary Search</title>
      <link>https://solairerove.github.io/posts/binary_search/</link>
      <pubDate>Fri, 20 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/binary_search/</guid>
      <description># O(log(n)) time || O(1) space def search(self, nums: List[int], target: int) -&amp;gt; int: low, high = 0, len(nums) - 1 while low &amp;lt;= high: mid = low + (high - low) // 2 if target == nums[mid]: return mid elif target &amp;lt; nums[mid]: high = mid - 1 else: low = mid + 1 return -1 classic default binary search. have two pointers as search border. decrease search borders two times on each iteration like you&amp;rsquo;re trying to find word in dictionary book.</description>
    </item>
    
    <item>
      <title>844. Backspace String Compare</title>
      <link>https://solairerove.github.io/posts/backspace_string_compare/</link>
      <pubDate>Thu, 19 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/backspace_string_compare/</guid>
      <description># O(n + m) time || O(1) space def backspace_compare_two_pointers(self, s: str, t: str) -&amp;gt; bool: def trim(to_trim): skip = 0 for c in reversed(to_trim): if c == &amp;#39;#&amp;#39;: skip += 1 elif skip: skip -= 1 else: yield c return all(a == b for a, b in itertools.zip_longest(trim(s), trim(t))) # O(n + m) time || O(n + m) space def backspace_compare_stack(self, s: str, t: str) -&amp;gt; bool: def trim(to_trim): stack = [] for c in to_trim: if c !</description>
    </item>
    
    <item>
      <title>141. Linked List Cycle</title>
      <link>https://solairerove.github.io/posts/linked_list_cycle/</link>
      <pubDate>Wed, 18 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/linked_list_cycle/</guid>
      <description># O(n) time || O(1) space def has_cycle(self, head: Optional[ListNode]) -&amp;gt; bool: slow = fast = head while fast and fast.next: slow, fast = slow.next, fast.next.next if slow == fast: return True return False Floyd&#39;s Cycle Finding Algorithm by considering two pointers at different speed. The slow pointer moves one step at a time while the fast pointer moves two steps at a time.</description>
    </item>
    
    <item>
      <title>206. Reverse Linked List</title>
      <link>https://solairerove.github.io/posts/reverse_linked_list/</link>
      <pubDate>Wed, 18 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/reverse_linked_list/</guid>
      <description># O(n) time || O(1) space def reverse_list(self, head: Optional[ListNode]) -&amp;gt; Optional[ListNode]: prev, curr = None, head while curr: curr.next, prev, curr = prev, curr, curr.next return prev traverse linked list using curr pointer. relink curr.next to prev each step on iteration. return the prev as head of reversed list</description>
    </item>
    
    <item>
      <title>876. Middle of the Linked List</title>
      <link>https://solairerove.github.io/posts/middle_of_the_linked_list/</link>
      <pubDate>Wed, 11 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/middle_of_the_linked_list/</guid>
      <description># O(n) time || O(1) space def middle_node(self, head: Optional[ListNode]) -&amp;gt; Optional[ListNode]: if not head.next: return head slow = fast = head while fast and fast.next: slow, fast = slow.next, fast.next.next return slow fast pointer traverse two times faster than slow, so when fast is done, slow is in middle of lined list</description>
    </item>
    
  </channel>
</rss>
