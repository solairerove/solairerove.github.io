<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sliding-window on Headstone lamp - leetcode grind (48)</title>
    <link>https://solairerove.github.io/tags/sliding-window/</link>
    <description>Recent content in sliding-window on Headstone lamp - leetcode grind (48)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© solairerove</copyright>
    <lastBuildDate>Fri, 10 Nov 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://solairerove.github.io/tags/sliding-window/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>424. Longest Repeating Character Replacement</title>
      <link>https://solairerove.github.io/posts/longest_repeating_character_replacement/</link>
      <pubDate>Fri, 10 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/longest_repeating_character_replacement/</guid>
      <description># O(n) time | O(1) space def character_replacement(self, s: str, k: int) -&amp;gt; int: freq, max_freq, res = collections.defaultdict(int), 0, 0 low = 0 for high in range(len(s)): freq[s[high]] += 1 max_freq = max(max_freq, freq[s[high]]) if (high - low + 1) - max_freq &amp;gt; k: freq[s[low]] -= 1 low += 1 res = max(res, high - low + 1) return res Detailed Explanation: Initialize Variables: freq: A dictionary to store the frequency of each character in the current window.</description>
    </item>
    
    <item>
      <title>480. Sliding Window Median</title>
      <link>https://solairerove.github.io/posts/sliding_window_median/</link>
      <pubDate>Fri, 10 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/sliding_window_median/</guid>
      <description>class MedianFinder: def __init__(self): self.small, self.large = [], [] self.lazy = collections.defaultdict(int) self.balance = 0 def add(self, num): if not self.small or num &amp;lt;= -self.small[0]: heapq.heappush(self.small, -num) self.balance -= 1 else: heapq.heappush(self.large, num) self.balance += 1 self.rebalance() def remove(self, num): self.lazy[num] += 1 if num &amp;lt;= -self.small[0]: self.balance += 1 else: self.balance -= 1 self.rebalance() self.lazy_remove() def find_median(self): if self.balance == 0: return (-self.small[0] + self.large[0]) / 2 elif self.balance &amp;lt; 0: return -self.</description>
    </item>
    
    <item>
      <title>239. Sliding Window Maximum</title>
      <link>https://solairerove.github.io/posts/sliding_window_maximum/</link>
      <pubDate>Tue, 07 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/sliding_window_maximum/</guid>
      <description># O(n) time | O(k) space def max_sliding_window(self, nums: List[int], k: int) -&amp;gt; List[int]: res = [] dq = collections.deque() for i, n in enumerate(nums): if dq and dq[0] &amp;lt; i - k + 1: dq.popleft() while dq and nums[dq[-1]] &amp;lt;= n: dq.pop() dq.append(i) if i &amp;gt;= k - 1: res.append(nums[dq[0]]) return res This is a classic sliding window problem that can be efficiently solved using a deque (double-ended queue). The idea is to maintain a deque of candidates in decreasing order and to ensure that the candidates are only from the current sliding window.</description>
    </item>
    
    <item>
      <title>438. Find All Anagrams in a String</title>
      <link>https://solairerove.github.io/posts/find_all_anagrams_in_a_string/</link>
      <pubDate>Tue, 24 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/find_all_anagrams_in_a_string/</guid>
      <description># O(n) time | O(1) space def find_anagrams(self, s: str, p: str) -&amp;gt; List[int]: s_cnt, p_cnt = [0] * 26, [0] * 26 for c in s[:len(p)]: s_cnt[ord(c) - ord(&amp;#39;a&amp;#39;)] += 1 for c in p: p_cnt[ord(c) - ord(&amp;#39;a&amp;#39;)] += 1 res = [] if s_cnt == p_cnt: res.append(0) for i in range(len(p), len(s)): s_cnt[ord(s[i]) - ord(&amp;#39;a&amp;#39;)] += 1 s_cnt[ord(s[i - len(p)]) - ord(&amp;#39;a&amp;#39;)] -= 1 if s_cnt == p_cnt: res.</description>
    </item>
    
  </channel>
</rss>
