<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>hard on Headstone lamp - leetcode grind</title>
    <link>https://solairerove.github.io/tags/hard/</link>
    <description>Recent content in hard on Headstone lamp - leetcode grind</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© solairerove</copyright>
    <lastBuildDate>Thu, 26 Oct 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://solairerove.github.io/tags/hard/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>301. Remove Invalid Parentheses</title>
      <link>https://solairerove.github.io/posts/remove_invalid_parentheses/</link>
      <pubDate>Thu, 26 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/remove_invalid_parentheses/</guid>
      <description># O(n) time || O(n) space def remove_invalid_parentheses(self, s: str) -&amp;gt; List[str]: def is_valid(string): cnt = 0 for c in string: if c == &amp;#39;(&amp;#39;: cnt += 1 elif c == &amp;#39;)&amp;#39;: cnt -= 1 if cnt &amp;lt; 0: return False return cnt == 0 res, stack, visited, found = [], [s], {s}, False while stack and not found: for curr_str in stack: if is_valid(curr_str): found = True res.append(curr_str) elif not found: for j in range(len(curr_str)): if curr_str[j] not in [&amp;#39;(&amp;#39;, &amp;#39;)&amp;#39;]: continue new_str = curr_str[:j] + curr_str[j + 1:] if new_str not in visited: visited.</description>
    </item>
    
    <item>
      <title>23. Merge k Sorted Lists</title>
      <link>https://solairerove.github.io/posts/merge_k_sorted_lists/</link>
      <pubDate>Wed, 18 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/merge_k_sorted_lists/</guid>
      <description># O(n * log(k)) time | O(1) space # n - is total number of nodes # k - is number of linked lists def merge_k_lists(self, lists: List[Optional[ListNode]]) -&amp;gt; Optional[ListNode]: if not lists: return None if len(lists) == 1: return lists[0] interval = 1 while interval &amp;lt; len(lists): for i in range(0, len(lists) - interval, interval * 2): lists[i] = self.merge(lists[i], lists[i + interval]) interval *= 2 return lists[0] # 21.</description>
    </item>
    
  </channel>
</rss>
