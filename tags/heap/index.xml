<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>heap on Headstone lamp - leetcode grind (45)</title>
    <link>https://solairerove.github.io/tags/heap/</link>
    <description>Recent content in heap on Headstone lamp - leetcode grind (45)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© solairerove</copyright>
    <lastBuildDate>Fri, 10 Nov 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://solairerove.github.io/tags/heap/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>480. Sliding Window Median</title>
      <link>https://solairerove.github.io/posts/sliding_window_median/</link>
      <pubDate>Fri, 10 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/sliding_window_median/</guid>
      <description>class MedianFinder: def __init__(self): self.small, self.large = [], [] self.lazy = collections.defaultdict(int) self.balance = 0 def add(self, num): if not self.small or num &amp;lt;= -self.small[0]: heapq.heappush(self.small, -num) self.balance -= 1 else: heapq.heappush(self.large, num) self.balance += 1 self.rebalance() def remove(self, num): self.lazy[num] += 1 if num &amp;lt;= -self.small[0]: self.balance += 1 else: self.balance -= 1 self.rebalance() self.lazy_remove() def find_median(self): if self.balance == 0: return (-self.small[0] + self.large[0]) / 2 elif self.balance &amp;lt; 0: return -self.</description>
    </item>
    
    <item>
      <title>295. Find Median from Data Stream</title>
      <link>https://solairerove.github.io/posts/find_median_from_data_stream/</link>
      <pubDate>Tue, 07 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/find_median_from_data_stream/</guid>
      <description>from heapq import heappush, heappop class MedianFinder: # O(1) time || O(n) space def __init__(self): self.small = [] # [0] is highest among small numbers, max heap self.large = [] # [0] is lowest among large numbers, min heap # O(log(n)) time || O(n) space def add_num(self, num: int) -&amp;gt; None: if not self.small or num &amp;lt;= -self.small[0]: heappush(self.small, -num) else: heappush(self.large, num) if len(self.small) &amp;gt; len(self.large) + 1: heappush(self.large, -heappop(self.</description>
    </item>
    
    <item>
      <title>692. Top K Frequent Words</title>
      <link>https://solairerove.github.io/posts/top_k_frequent_words/</link>
      <pubDate>Fri, 03 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/top_k_frequent_words/</guid>
      <description>sorting to obtain the top k frequent words in O(n + m * log(m)) time.
# O(n + m * log(m)) time || O(m) space # n is number of words in list # m is number of unique words # k is number of top freq words def top_k_frequent_sorting(self, words: List[str], k: int) -&amp;gt; List[str]: cnt = collections.Counter(words) return sorted(cnt, key=lambda word: (-cnt[word], word))[:k] heapq library to obtain the top k frequent words in O(n + k * log(m)) time.</description>
    </item>
    
    <item>
      <title>1985. Find the Kth Largest Integer in the Array</title>
      <link>https://solairerove.github.io/posts/find_the_kth_largest_integer_in_the_array/</link>
      <pubDate>Thu, 02 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/find_the_kth_largest_integer_in_the_array/</guid>
      <description>Use Python&amp;rsquo;s heapq library to obtain the kth largest number in O(n * log(k * m)) time.
# O(n * log(k * m)) time || O(k) space # n is len of nums # m is len of each num # k is k def kth_largest_number_heap(self, nums: List[str], k: int) -&amp;gt; str: heap = [] for num in nums: heapq.heappush(heap, int(num)) if len(heap) &amp;gt; k: heapq.heappop(heap) return str(heap[0]) Quickselect with optimisations.</description>
    </item>
    
    <item>
      <title>215. Kth Largest Element in an Array</title>
      <link>https://solairerove.github.io/posts/kth_largest_element_in_an_array/</link>
      <pubDate>Thu, 02 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/kth_largest_element_in_an_array/</guid>
      <description>Use Python&amp;rsquo;s heapq library to obtain the k largest number in O(nlogk) time.
# O(n * log(k)) time || O(k) space def find_kth_largest_heap(self, nums: List[int], k: int) -&amp;gt; int: return heapq.nlargest(k, nums)[-1] Quickselect with optimisations. Works very slow on leetcode cases. Maybe median of medians will help.
# O(max(n, n^2) time || O(1) space def find_kth_largest_quickselect(self, nums: List[int], k: int) -&amp;gt; int: return quickselect(nums, 0, len(nums) - 1, len(nums) - k) # nums[len(nums) - k] def quickselect(arr, low, high, k): if low == high: return arr[low] lt, gt = partition(arr, low, high, random.</description>
    </item>
    
    <item>
      <title>347. Top K Frequent Elements</title>
      <link>https://solairerove.github.io/posts/top_k_frequent_elements/</link>
      <pubDate>Thu, 02 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/top_k_frequent_elements/</guid>
      <description>Quickselect Explained: Quickselect is a cousin of the quicksort algorithm. The idea behind quickselect is to find the k-th smallest (or largest) element without having to sort the entire list.
Steps of Quickselect: Choose a &amp;lsquo;pivot&amp;rsquo; element from the list and partition the other elements into two sub-arrays, according to whether they are less than or greater than the pivot. Reorder the list so that all elements less than the pivot come before (in no particular order) and all elements greater than the pivot come after it (also in no particular order).</description>
    </item>
    
  </channel>
</rss>
