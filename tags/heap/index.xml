<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>heap on Headstone lamp - leetcode grind</title>
    <link>https://solairerove.github.io/tags/heap/</link>
    <description>Recent content in heap on Headstone lamp - leetcode grind</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© solairerove</copyright>
    <lastBuildDate>Wed, 01 Nov 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://solairerove.github.io/tags/heap/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>347. Top K Frequent Elements</title>
      <link>https://solairerove.github.io/posts/top_k_frequent_elements/</link>
      <pubDate>Wed, 01 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solairerove.github.io/posts/top_k_frequent_elements/</guid>
      <description>Use a bucket sort-like approach which has an average case time complexity of O(n), where n is the length of the nums list. The idea is to:
Use a frequency dictionary to count the occurrence of each number. Create a list of buckets where the index of each bucket corresponds to the frequency of the elements. For instance, buckets[3] will contain all elements that appear three times in nums. Iterate through the buckets in reverse (from high frequency to low) to get the top k frequent numbers.</description>
    </item>
    
  </channel>
</rss>
