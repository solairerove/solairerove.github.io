<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>strings on Headstone lamp - It&#39;s always has been</title>
    <link>https://solairerove.github.io/categories/strings/</link>
    <description>Recent content in strings on Headstone lamp - It&#39;s always has been</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 28 May 2021 17:56:39 +0300</lastBuildDate><atom:link href="https://solairerove.github.io/categories/strings/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Longest Substring Without Duplication</title>
      <link>https://solairerove.github.io/post/longest-substring-without-duplication/</link>
      <pubDate>Fri, 28 May 2021 17:56:39 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/longest-substring-without-duplication/</guid>
      <description>Input: &amp;ldquo;qvfwpccitm&amp;rdquo;
Output: &amp;ldquo;qvfwpc&amp;rdquo; \
longest substring without duplication
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  // O(n) time | O(n) space fun longestSubstringWithoutDuplication(s: String): String { val charToLastIdx = mutableMapOf&amp;lt;Char, Int&amp;gt;() var longest = Pair(0, 1) var low = 0 for (i in s.indices) { val char = s[i] if (char in charToLastIdx) { low = max(low, charToLastIdx[char]!</description>
    </item>
    
    <item>
      <title>Minimum Chars for Words</title>
      <link>https://solairerove.github.io/post/minimum-chars-for-words/</link>
      <pubDate>Wed, 26 May 2021 18:44:10 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/minimum-chars-for-words/</guid>
      <description>Input: [&amp;ldquo;only&amp;rdquo;, &amp;ldquo;after&amp;rdquo;, &amp;ldquo;we&amp;rdquo;, &amp;ldquo;have&amp;rdquo;, &amp;ldquo;lost&amp;rdquo;, &amp;ldquo;everything&amp;rdquo;]
Output: [o, n, l, y, a, f, t, e, e, r, w, h, v, s, i, g] \
minimum chars for words
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  // O(n * l) time | O(c) space // n is number of words // l is length of longest word // c is number of unique chars fun minimumCharsForWords(words: List&amp;lt;String&amp;gt;): List&amp;lt;Char&amp;gt; { val maxCharFreq = mutableMapOf&amp;lt;Char, Int&amp;gt;() for (word in words) { val charFreq = mutableMapOf&amp;lt;Char, Int&amp;gt;() word.</description>
    </item>
    
    <item>
      <title>Reverse Words in String</title>
      <link>https://solairerove.github.io/post/reverse-words-in-string/</link>
      <pubDate>Tue, 25 May 2021 18:43:36 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/reverse-words-in-string/</guid>
      <description>Input: &amp;ldquo;anything. do to free we&amp;rsquo;re that everything lost we&amp;rsquo;ve after only It&amp;rsquo;s&amp;rdquo;
Output: &amp;ldquo;It&amp;rsquo;s only after we&amp;rsquo;ve lost everything that we&amp;rsquo;re free to do anything.&amp;rdquo; \
reverse words in string
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34  // O(n) time | O(n) space fun reverseWordsInString(s: String): String { val chars = s.</description>
    </item>
    
    <item>
      <title>Valid IP Addresses</title>
      <link>https://solairerove.github.io/post/valid-ip-addresses/</link>
      <pubDate>Mon, 24 May 2021 20:36:15 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/valid-ip-addresses/</guid>
      <description>Input: &amp;ldquo;19216801&amp;rdquo;
Output: [19.216.80.1, 192.16.80.1, 192.168.0.1]
valid ip addresses
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37  import kotlin.math.min // O(1) time | O(1) space fun validIPAddresses(s: String): List&amp;lt;String&amp;gt; { val n = s.length val addresses = mutableListOf&amp;lt;String&amp;gt;() for (i in 1 until min(n, 4)) { val parts = mutableListOf(&amp;#34;&amp;#34;, &amp;#34;&amp;#34;, &amp;#34;&amp;#34;, &amp;#34;&amp;#34;) parts[0] = s.</description>
    </item>
    
    <item>
      <title>Non Repeating Char Pivot</title>
      <link>https://solairerove.github.io/post/non-repeating-char-pivot/</link>
      <pubDate>Thu, 20 May 2021 23:08:17 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/non-repeating-char-pivot/</guid>
      <description>Input: &amp;ldquo;sptiroksoz&amp;rdquo;
Output: 1
non repeating char pivot
1 2 3 4 5 6 7 8 9 10 11 12  // O(n) time | O(n) space fun nonRepeatingCharPivot(s: String): Int { val freq = mutableMapOf&amp;lt;Char, Int&amp;gt;() s.forEach { freq[it] = freq.getOrDefault(it, 0) + 1 } for (i in s.indices) { if (freq[s[i]] == 1) return i } return -1 }   </description>
    </item>
    
    <item>
      <title>Generate Document</title>
      <link>https://solairerove.github.io/post/generate-document/</link>
      <pubDate>Wed, 19 May 2021 09:09:38 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/generate-document/</guid>
      <description>Input: chars = &amp;ldquo;abcabc&amp;rdquo;, doc = &amp;ldquo;aabbcc&amp;rdquo;
Output: true
generate document
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  // O(n + m) time | O(c) space // n is number of chars // m is document length // c is number of unique chars fun generateDocument(chars: String, doc: String): Boolean { val freq = mutableMapOf&amp;lt;Char, Int&amp;gt;() for (c in chars) { if (c !</description>
    </item>
    
    <item>
      <title>Run Length Encoding</title>
      <link>https://solairerove.github.io/post/run-length-encoding/</link>
      <pubDate>Tue, 18 May 2021 20:31:47 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/run-length-encoding/</guid>
      <description>Input: &amp;ldquo;xxxxxxyyyйййй&amp;rdquo;
Output: &amp;ldquo;6x3y4й&amp;rdquo;
 run length encoding  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  // O(n) time | O(n) space fun runLengthEncoding(s: String): String { val n = s.length val encoded = mutableListOf&amp;lt;Char&amp;gt;() var len = 1 for (i in 1 until n) { val currChar = s[i] val prevChar = s[i - 1] if (currChar !</description>
    </item>
    
    <item>
      <title>Caesar Cipher Encryptor</title>
      <link>https://solairerove.github.io/post/caesar-cipher-encryptor/</link>
      <pubDate>Mon, 17 May 2021 19:58:00 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/caesar-cipher-encryptor/</guid>
      <description>Input: &amp;ldquo;abc&amp;rdquo;
Output: &amp;ldquo;cde&amp;rdquo;
caesar cipher encryptor
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  // O(n) time | O(n) space fun caesarCipherEncryptor(s: String, k: Int): String { val newLetters = mutableListOf&amp;lt;Char&amp;gt;() val key = k % 26 s.forEach { newLetters.add(getNewLetter(it, key)) } return newLetters.joinToString(&amp;#34;&amp;#34;) } fun getNewLetter(letter: Char, key: Int): Char { val newLetterCode = letter.toInt() + key return if (newLetterCode &amp;lt;= 122) { newLetterCode.</description>
    </item>
    
    <item>
      <title>Group Anagrams</title>
      <link>https://solairerove.github.io/post/group-anagrams/</link>
      <pubDate>Tue, 11 May 2021 21:08:31 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/group-anagrams/</guid>
      <description>Input: [&amp;ldquo;funeral&amp;rdquo;, &amp;ldquo;realfun&amp;rdquo;, &amp;ldquo;debitcard&amp;rdquo;, &amp;ldquo;badcredit&amp;rdquo;, &amp;ldquo;bobmarley&amp;rdquo;, &amp;ldquo;marbleboy&amp;rdquo;]
Output: [[funeral, realfun], [debitcard, badcredit], [bobmarley, marbleboy]]
group anagrams
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  // O(w * nlog(n)) time | O(wn) space // w - number of words // n - length of longest word fun groupAnagrams(words: List&amp;lt;String&amp;gt;): List&amp;lt;List&amp;lt;String&amp;gt;&amp;gt; { val anagrams = mutableMapOf&amp;lt;String, MutableList&amp;lt;String&amp;gt;&amp;gt;() for (word in words) { val sortedWord = word.</description>
    </item>
    
    <item>
      <title>Longest Palindrome</title>
      <link>https://solairerove.github.io/post/longest-palindrome/</link>
      <pubDate>Mon, 10 May 2021 20:33:20 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/longest-palindrome/</guid>
      <description>Input: s = &amp;ldquo;arpkqqkpfkpdp&amp;rdquo;
Output: pkqqkp
longest palindrome
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  // O(n^2) time | O(n) space fun longestPalindrome(s: String): String { var longest = listOf(0, 1) for (i in 1 until s.length) { val odd = getLongestPalindrome(s, i - 1, i + 1) val even = getLongestPalindrome(s, i - 1, i) val curr = if (odd[1] - odd[0] &amp;gt; even[1] - odd[0]) odd else even longest = if (longest[1] - longest[0] &amp;gt; curr[1] - curr[0]) longest else curr } return s.</description>
    </item>
    
    <item>
      <title>Palindrome Check</title>
      <link>https://solairerove.github.io/post/palindrome-check/</link>
      <pubDate>Wed, 03 Mar 2021 16:56:50 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/palindrome-check/</guid>
      <description>Палиндром - строка, которая одинаково читается в обоих направлениях.
palindrome check
1 2 3 4 5 6 7 8 9  // O(n) time | O(1) space fun isPalindrome(s: String): Boolean { for (i in s.indices) { if (s[i] != s[s.length - 1 - i]) { return false } } return true }   </description>
    </item>
    
  </channel>
</rss>
