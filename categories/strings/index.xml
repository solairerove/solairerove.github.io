<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>strings on Headstone lamp - It&#39;s always has been</title>
    <link>https://solairerove.github.io/categories/strings/</link>
    <description>Recent content in strings on Headstone lamp - It&#39;s always has been</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 17 May 2021 19:58:00 +0300</lastBuildDate><atom:link href="https://solairerove.github.io/categories/strings/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Caesar Cipher Encryptor</title>
      <link>https://solairerove.github.io/post/caesar-cipher-encryptor/</link>
      <pubDate>Mon, 17 May 2021 19:58:00 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/caesar-cipher-encryptor/</guid>
      <description>Input: &amp;ldquo;abc&amp;rdquo;
Output: &amp;ldquo;cde&amp;rdquo;
 caesar cipher encryptor  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  // O(n) time | O(n) space fun caesarCipherEncryptor(s: String, k: Int): String { val newLetters = mutableListOf&amp;lt;Char&amp;gt;() val key = k % 26 s.forEach { newLetters.add(getNewLetter(it, key)) } return newLetters.joinToString(&amp;#34;&amp;#34;) } fun getNewLetter(letter: Char, key: Int): Char { val newLetterCode = letter.toInt() + key return if (newLetterCode &amp;lt;= 122) { newLetterCode.</description>
    </item>
    
    <item>
      <title>Group Anagrams</title>
      <link>https://solairerove.github.io/post/group-anagrams/</link>
      <pubDate>Tue, 11 May 2021 21:08:31 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/group-anagrams/</guid>
      <description>Input: [&amp;ldquo;funeral&amp;rdquo;, &amp;ldquo;realfun&amp;rdquo;, &amp;ldquo;debitcard&amp;rdquo;, &amp;ldquo;badcredit&amp;rdquo;, &amp;ldquo;bobmarley&amp;rdquo;, &amp;ldquo;marbleboy&amp;rdquo;]
Output: [[funeral, realfun], [debitcard, badcredit], [bobmarley, marbleboy]]
group anagrams
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  // O(w * nlog(n)) time | O(wn) space // w - number of words // n - length of longest word fun groupAnagrams(words: List&amp;lt;String&amp;gt;): List&amp;lt;List&amp;lt;String&amp;gt;&amp;gt; { val anagrams = mutableMapOf&amp;lt;String, MutableList&amp;lt;String&amp;gt;&amp;gt;() for (word in words) { val sortedWord = word.</description>
    </item>
    
    <item>
      <title>Longest Palindrome</title>
      <link>https://solairerove.github.io/post/longest-palindrome/</link>
      <pubDate>Mon, 10 May 2021 20:33:20 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/longest-palindrome/</guid>
      <description>Input: s = &amp;ldquo;arpkqqkpfkpdp&amp;rdquo;
Output: pkqqkp
longest palindrome
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  // O(n^2) time | O(n) space fun longestPalindrome(s: String): String { var longest = listOf(0, 1) for (i in 1 until s.length) { val odd = getLongestPalindrome(s, i - 1, i + 1) val even = getLongestPalindrome(s, i - 1, i) val curr = if (odd[1] - odd[0] &amp;gt; even[1] - odd[0]) odd else even longest = if (longest[1] - longest[0] &amp;gt; curr[1] - curr[0]) longest else curr } return s.</description>
    </item>
    
    <item>
      <title>Palindrome Check</title>
      <link>https://solairerove.github.io/post/palindrome-check/</link>
      <pubDate>Wed, 03 Mar 2021 16:56:50 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/palindrome-check/</guid>
      <description>Палиндром - строка, которая одинаково читается в обоих направлениях.
palindrome check
1 2 3 4 5 6 7 8 9  // O(n) time | O(1) space fun isPalindrome(s: String): Boolean { for (i in s.indices) { if (s[i] != s[s.length - 1 - i]) { return false } } return true }   </description>
    </item>
    
  </channel>
</rss>
