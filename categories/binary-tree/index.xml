<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>binary tree on Headstone lamp - It&#39;s always has been</title>
    <link>https://solairerove.github.io/categories/binary-tree/</link>
    <description>Recent content in binary tree on Headstone lamp - It&#39;s always has been</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 11 Nov 2021 11:55:00 +0300</lastBuildDate><atom:link href="https://solairerove.github.io/categories/binary-tree/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Binary Tree Postorder Traversal</title>
      <link>https://solairerove.github.io/post/postorder-traversal/</link>
      <pubDate>Thu, 11 Nov 2021 11:55:00 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/postorder-traversal/</guid>
      <description>Given the root of a binary tree, return the postorder traversal of its nodes&#39; values.
 3 / \ 7 8 / \ / \ 14 15 21 25  Output: [14, 15, 7, 21, 25, 8, 3]
postorder traversal
leetcode
No clue
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  class TreeNode(var value: Int) { var left: TreeNode? = null var right: TreeNode?</description>
    </item>
    
    <item>
      <title>Binary Tree Preorder Traversal</title>
      <link>https://solairerove.github.io/post/preorder-traversal/</link>
      <pubDate>Thu, 11 Nov 2021 11:50:53 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/preorder-traversal/</guid>
      <description>Given the root of a binary tree, return the preorder traversal of its nodes&#39; values.
 3 / \ 7 8 / \ / \ 14 15 21 25  Output: [3, 7, 14, 15, 8, 21, 25]
preorder traversal
leetcode
No clue
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  class TreeNode(var value: Int) { var left: TreeNode? = null var right: TreeNode?</description>
    </item>
    
    <item>
      <title>Binary Tree Inorder Traversal</title>
      <link>https://solairerove.github.io/post/inorder-traversal/</link>
      <pubDate>Thu, 11 Nov 2021 11:48:23 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/inorder-traversal/</guid>
      <description>Given the root of a binary tree, return the inorder traversal of its nodes&#39; values.
 3 / \ 7 8 / \ / \ 14 15 21 25  Output: [14, 7, 15, 3, 21, 8, 25]
inorder traversal
leetcode
No clue
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  class TreeNode(var value: Int) { var left: TreeNode? = null var right: TreeNode?</description>
    </item>
    
    <item>
      <title>Sum of Node Depths</title>
      <link>https://solairerove.github.io/post/sum-of-node-depths/</link>
      <pubDate>Fri, 29 Oct 2021 16:28:14 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/sum-of-node-depths/</guid>
      <description>3 / \ 7 8 / \ / \ 14 15 21 25  Output: 14
sum of node depths
1 2 3 4 5 6 7 8 9 10 11 12  class TreeNode(var value: Int) { var left: TreeNode? = null var right: TreeNode? = null } // O(n) time | O(h) space fun sumOfNodeDepths(node: TreeNode?, depth: Int = 0): Int { if (node == null) return 0 val depthSum = (depth * (depth + 1)) / 2 return depthSum + sumOfNodeDepths(node.</description>
    </item>
    
    <item>
      <title>Flatten Binary Tree to Linked List</title>
      <link>https://solairerove.github.io/post/flatten-binary-tree-to-linked-list/</link>
      <pubDate>Thu, 28 Oct 2021 18:16:14 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/flatten-binary-tree-to-linked-list/</guid>
      <description>Given the root of a binary tree, flatten the tree into a &amp;ldquo;linked list&amp;rdquo;:
  The &amp;ldquo;linked list&amp;rdquo; should use the same TreeNode class where the right child pointer points
to the next node in the list and the left child pointer is always null.
  The &amp;ldquo;linked list&amp;rdquo; should be in the same order as a pre-order traversal of the binary tree.
 3 / \  7 8 / \ /</description>
    </item>
    
    <item>
      <title>Is Height Balanced Binary Tree</title>
      <link>https://solairerove.github.io/post/is-height-balanced-binary-tree/</link>
      <pubDate>Wed, 27 Oct 2021 14:08:59 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/is-height-balanced-binary-tree/</guid>
      <description>Given a binary tree, determine if it is height-balanced.
For this problem, a height-balanced binary tree is defined as:
a binary tree in which the left and right subtrees of every node differ in height by no more than 1.    3 / \ 7 8 / \ / \ 14 15 21 25  Output: true
is height balanced
leetcode
No clue
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  class TreeNode(var value: Int) { var left: TreeNode?</description>
    </item>
    
    <item>
      <title>Inorder Successor</title>
      <link>https://solairerove.github.io/post/inorder-successor/</link>
      <pubDate>Wed, 27 Oct 2021 13:49:10 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/inorder-successor/</guid>
      <description>In Binary Tree, Inorder successor of a node is the next node in Inorder traversal of the Binary Tree
 3 / \ 7 8 / \ / \ 14 15 21 25  Input: 7 Output: 15
inorder successor
leetcode
No clue
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  class TreeNode(var value: Int) { var left: TreeNode?</description>
    </item>
    
    <item>
      <title>Diameter of Binary Tree</title>
      <link>https://solairerove.github.io/post/diameter-of-binary-tree/</link>
      <pubDate>Wed, 27 Oct 2021 12:00:34 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/diameter-of-binary-tree/</guid>
      <description>Given the root of a binary tree, return the length of the diameter of the tree.
The diameter of a binary tree is the length of the longest path between any two nodes in a tree.
This path may or may not pass through the root.
The length of a path between two nodes is represented by the number of edges between them.
 3 / \ 7 8 / \ / \ 14 15 21 25  Output: 3</description>
    </item>
    
    <item>
      <title>Maximum Path Sum</title>
      <link>https://solairerove.github.io/post/maximum-path-sum/</link>
      <pubDate>Tue, 26 Oct 2021 18:25:00 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/maximum-path-sum/</guid>
      <description>3 / \ 7 8 / \ / \ 14 15 21 25  Output: 58 (15 + 7 + 3 + 8 + 25)
max path sum
leetcode
A path from start to end, goes up on the tree for 0 or more steps,
then goes down for 0 or more steps. Once it goes down, it can&amp;rsquo;t go up.
Each path has a highest node, which is also the lowest common ancestor of all other nodes on the path.</description>
    </item>
    
    <item>
      <title>Invert Binary Tree</title>
      <link>https://solairerove.github.io/post/invert-binary-tree/</link>
      <pubDate>Tue, 26 Oct 2021 17:15:29 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/invert-binary-tree/</guid>
      <description>3 / \ 7 8 / \ / \ 14 15 21 25 3 / \ 8 7 / \ / \ 25 21 15 14  Output: [25 8 21 3 15 7 14]
invert binary tree
leetcode
Make recursive swap traversal.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  class TreeNode(var value: Int) { var left: TreeNode?</description>
    </item>
    
    <item>
      <title>Node Depths</title>
      <link>https://solairerove.github.io/post/node-depths/</link>
      <pubDate>Tue, 26 Oct 2021 15:50:17 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/node-depths/</guid>
      <description>Find sum of nodes depths. Depth is distance between root and node.
 3 / \ 7 8 / \ / \ 14 15 21 25  Output: 10
node depths
easy leetcode version
Make tree traversal, increment depth on recursive call.
1 2 3 4 5 6 7 8 9 10 11 12 13  class TreeNode(var value: Int) { var left: TreeNode? = null var right: TreeNode? = null } // O(n) time | O(h) space // n - number of nodes // h - height of tree fun nodeDepths(node: TreeNode?</description>
    </item>
    
    <item>
      <title>Branch Sums</title>
      <link>https://solairerove.github.io/post/branch-sums/</link>
      <pubDate>Tue, 26 Oct 2021 12:11:17 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/branch-sums/</guid>
      <description>3 / \ 7 8 / \ / \ 14 15 21 25  Output: [24, 25, 32, 36]
branch sums
easy leetcode version
Make pre order tree traversal, summarize current value.
If there&amp;rsquo;s no left or right, we&amp;rsquo;re done with branch.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  class TreeNode(var value: Int) { var left: TreeNode?</description>
    </item>
    
  </channel>
</rss>
