<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>binary search tree on Headstone lamp - It&#39;s always has been</title>
    <link>https://solairerove.github.io/categories/binary-search-tree/</link>
    <description>Recent content in binary search tree on Headstone lamp - It&#39;s always has been</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 26 Oct 2021 11:19:53 +0300</lastBuildDate><atom:link href="https://solairerove.github.io/categories/binary-search-tree/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Find Kth Largest Element in a BST</title>
      <link>https://solairerove.github.io/post/find-kth-largest-element-in-a-bst/</link>
      <pubDate>Tue, 26 Oct 2021 11:19:53 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/find-kth-largest-element-in-a-bst/</guid>
      <description>14 / \ 7 21 /\ /\ 3 8 15 25  Input: 2 Output: 21
Input: 4 Output: 14
find kth largest element in a bst
leetcode
Make in order tree traversal, so kth largest will be arr.size - k
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  open class BST(var value: Int) { var left: BST?</description>
    </item>
    
    <item>
      <title>Traverse Bst</title>
      <link>https://solairerove.github.io/post/traverse-bst/</link>
      <pubDate>Mon, 25 Oct 2021 13:53:31 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/traverse-bst/</guid>
      <description>14 / \ 7 21 /\ /\ 3 8 15 25  Output:
in order: [3, 7, 8, 14, 15, 21, 25] pre order: [14, 7, 3, 8, 21, 15, 25] post order: [3, 8, 7, 15, 25, 21, 14]
traverse bst
No clue why
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34  open class BST(var value: Int) { var left: BST?</description>
    </item>
    
    <item>
      <title>Validate BST</title>
      <link>https://solairerove.github.io/post/validate-bst/</link>
      <pubDate>Mon, 25 Oct 2021 13:29:01 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/validate-bst/</guid>
      <description>14 / \ 7 21 /\ /\ 3 8 15 25  Output: true
validate bst
https://algs4.cs.princeton.edu/32bst/BST.java.html#isBST
Recursive version of isBST method.
BST is valid:
 if value greater to every left node values if value less than every right node values  So for recursive solution is possible to make expression where
 max value is current node value for left branches min value is current node value for right branches  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  open class BST(var value: Int) { var left: BST?</description>
    </item>
    
    <item>
      <title>Find the Closest Value in Bst</title>
      <link>https://solairerove.github.io/post/find-the-closest-value-in-bst/</link>
      <pubDate>Fri, 22 Oct 2021 14:30:19 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/find-the-closest-value-in-bst/</guid>
      <description>14 / \ 7 21 /\ /\ 3 8 15 25  Input: 16
Output: 15
find the closest value
Iterate through tree. Find the closest value to target.
The closest is the smallest delta result,
so it can be represented as abs(target - value) &amp;lt; abs(target - closest)
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  open class BST(var value: Int) { var left: BST?</description>
    </item>
    
  </channel>
</rss>
