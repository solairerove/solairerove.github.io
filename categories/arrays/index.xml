<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>arrays on Headstone lamp - It&#39;s always has been</title>
    <link>https://solairerove.github.io/categories/arrays/</link>
    <description>Recent content in arrays on Headstone lamp - It&#39;s always has been</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 29 Apr 2021 14:39:58 +0300</lastBuildDate><atom:link href="https://solairerove.github.io/categories/arrays/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Validate Subsequence</title>
      <link>https://solairerove.github.io/post/validate-subsequence/</link>
      <pubDate>Thu, 29 Apr 2021 14:39:58 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/validate-subsequence/</guid>
      <description>validate subsequence
1 2 3 4 5 6 7 8 9 10 11  // O(n) time | O(1) space fun validateSubsequence(arr: List&amp;lt;Int&amp;gt;, subsequence: List&amp;lt;Int&amp;gt;): Boolean { var seqIdx = 0 for (el in arr) { if (seqIdx == subsequence.size) break if (el == subsequence[seqIdx]) seqIdx++ } return seqIdx == subsequence.size }   </description>
    </item>
    
    <item>
      <title>Pivot Index</title>
      <link>https://solairerove.github.io/post/pivot-index/</link>
      <pubDate>Tue, 20 Apr 2021 20:20:36 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/pivot-index/</guid>
      <description>leetcode
pivot index
1 2 3 4 5 6 7 8 9 10 11  // O(n) time | O(1) space fun pivotIndex(arr: List&amp;lt;Int&amp;gt;): Int { val total = arr.sum() var sum = 0 for (i in arr.indices) { if (sum * 2 == total - arr[i]) return i sum += arr[i] } return -1 }   </description>
    </item>
    
    <item>
      <title>Two Numbers Sum</title>
      <link>https://solairerove.github.io/post/two-numbers-sum/</link>
      <pubDate>Mon, 12 Apr 2021 22:06:31 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/two-numbers-sum/</guid>
      <description>Дан массив. Вернуть массив из элементов, сумма которых равна заданной. \
 Наивный подход на n^2 пересуммировать все возможные элементы. \ Линейная сложность с помощью мапы или сета. \ Константную память можно получить,
если отсортировать массив,
и почти как в бинарном поиске обновлять верхний и нижний индексы  two number sum
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33  // O(n) time | O(n) space fun twoNumberSumSet(arr: MutableList&amp;lt;Int&amp;gt;, targetSum: Int): List&amp;lt;Int&amp;gt; { val numbers = hashSetOf&amp;lt;Int&amp;gt;() for (a in arr) { val potential = targetSum - a if (numbers.</description>
    </item>
    
  </channel>
</rss>
