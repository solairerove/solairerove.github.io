<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>arrays on Headstone lamp - It&#39;s always has been</title>
    <link>https://solairerove.github.io/categories/arrays/</link>
    <description>Recent content in arrays on Headstone lamp - It&#39;s always has been</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 07 May 2021 15:18:41 +0300</lastBuildDate><atom:link href="https://solairerove.github.io/categories/arrays/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Tournament Winner</title>
      <link>https://solairerove.github.io/post/tournament-winner/</link>
      <pubDate>Fri, 07 May 2021 15:18:41 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/tournament-winner/</guid>
      <description>Input:
1 2 3 4 5 6 7  val competitions = listOf( listOf(&amp;#34;Kotlin&amp;#34;, &amp;#34;Java&amp;#34;), listOf(&amp;#34;Java&amp;#34;, &amp;#34;Python&amp;#34;), listOf(&amp;#34;Python&amp;#34;, &amp;#34;Kotlin&amp;#34;) ) val results = listOf(1, 0, 0)   Output: Kotlin
tournament winner
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  // O(n) time | O(k) space // n - number of competitions // k - number of teams fun tournamentWinner(competitions: List&amp;lt;List&amp;lt;String&amp;gt;&amp;gt;, results: List&amp;lt;Int&amp;gt;): String { var winner = &amp;#34;&amp;#34; val teamToScore = mutableMapOf(winner to 0) for (i in competitions.</description>
    </item>
    
    <item>
      <title>Non Constructable Change</title>
      <link>https://solairerove.github.io/post/non-constructable-change/</link>
      <pubDate>Thu, 06 May 2021 13:40:20 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/non-constructable-change/</guid>
      <description>Input: arr = [2, 3, 1, 1, 2, 13]
Output: 10
non constructable change
1 2 3 4 5 6 7 8 9 10 11 12 13  // O(nlog(n)) time | O(1) space fun nonConstructableChange(arr: MutableList&amp;lt;Int&amp;gt;): Int { arr.sort() var change = 0 for (el in arr) { if (el &amp;gt; change + 1) return change + 1 change += el } return change + 1 }   </description>
    </item>
    
    <item>
      <title>Sort Squared Array</title>
      <link>https://solairerove.github.io/post/sort-squared-array/</link>
      <pubDate>Wed, 05 May 2021 13:43:52 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/sort-squared-array/</guid>
      <description>Input: arr = [-2, -1, 3, 4, 6, 7, 9, 10]
Output: [1, 4, 9, 16, 36, 49, 81, 100]
sorted squared array
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  // O(n) time | O(n) space fun sortedSquaredArray(arr: List&amp;lt;Int&amp;gt;): List&amp;lt;Int&amp;gt; { val n = arr.size val sortedSquared = MutableList(n) { 0 } var low = 0 var high = n - 1 for (i in n - 1 downTo 0) { val lowEl = arr[low] val highEl = arr[high] if (abs(highEl) &amp;gt; abs(lowEl)) { sortedSquared[i] = highEl * highEl high-- } else { sortedSquared[i] = lowEl * lowEl low++ } } return sortedSquared }   </description>
    </item>
    
    <item>
      <title>Smallest Difference</title>
      <link>https://solairerove.github.io/post/smallest-difference/</link>
      <pubDate>Tue, 04 May 2021 23:44:48 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/smallest-difference/</guid>
      <description>Input: arrOne=[2, -9, 0, 14, 1, -8, -3, -1, 8, -6, 5, -5], arrTwo=[15, -8, 3, 1, 7, -10, 2, -1, 4, -3, 17, -2] Output: [-8, -8]
smallest difference
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37  // O(nlog(n) + mlog(m)) time | O(1) space fun smallestDifference(arrOne: MutableList&amp;lt;Int&amp;gt;, arrTwo: MutableList&amp;lt;Int&amp;gt;): List&amp;lt;Int&amp;gt; { arrOne.</description>
    </item>
    
    <item>
      <title>Longest Peak</title>
      <link>https://solairerove.github.io/post/longest-peak/</link>
      <pubDate>Tue, 04 May 2021 13:03:22 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/longest-peak/</guid>
      <description>Input: arr = [3, -4, 7, 12, 4, 20, 15, 6, -2, 5, 16, 11, 1]
Output: 5
longest peak
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  // O(n) time | O(1) space fun longestPeak(arr: List&amp;lt;Int&amp;gt;): Int { var longestPeakLen = 0 var i = 1 while (i &amp;lt; arr.size - 1) { val isPeak = arr[i] &amp;gt; arr[i - 1] &amp;amp;&amp;amp; arr[i] &amp;gt; arr[i + 1] if (!</description>
    </item>
    
    <item>
      <title>Spiral Traverse</title>
      <link>https://solairerove.github.io/post/spiral-traverse/</link>
      <pubDate>Mon, 03 May 2021 20:43:19 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/spiral-traverse/</guid>
      <description>Input: arr = [[8, 2, -2, -4, 1], [3, 5, 10, 6, 4], [4, 10, -2, 1, 9], [6, 9, -4, 0, -1]]
Output: [8, 2, -2, -4, 1, 4, 9, -1, 0, -4, 9, 6, 4, 3, 5, 10, 6, 1, -2, 10]
spiral traverse
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35  // O(n) time | O(n) space fun spiralTraverse(arr: List&amp;lt;List&amp;lt;Int&amp;gt;&amp;gt;): List&amp;lt;Int&amp;gt; { val res = mutableListOf&amp;lt;Int&amp;gt;() var lowRow = 0 var highRow = arr.</description>
    </item>
    
    <item>
      <title>Monotonic Array</title>
      <link>https://solairerove.github.io/post/monotonic-array/</link>
      <pubDate>Fri, 30 Apr 2021 16:16:13 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/monotonic-array/</guid>
      <description>Input: arr = [-10, -9, -4, 0, 1, 2, 3, 5, 9, 11, 12, 14, 17]
Output: true
monotonic array
1 2 3 4 5 6 7 8 9 10 11 12 13 14  // O(n) time | O(1) space fun isMonotonic(arr: List&amp;lt;Int&amp;gt;): Boolean { var isIncreasing = true var isDecreasing = true for (i in 1 until arr.size) { when { arr[i - 1] &amp;lt; arr[i] -&amp;gt; isDecreasing = false arr[i - 1] &amp;gt; arr[i] -&amp;gt; isIncreasing = false } } return isIncreasing || isDecreasing }   </description>
    </item>
    
    <item>
      <title>Move Element to the End</title>
      <link>https://solairerove.github.io/post/move-element-to-the-end/</link>
      <pubDate>Fri, 30 Apr 2021 16:06:24 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/move-element-to-the-end/</guid>
      <description>Input: arr = [-9, -7, 2, -4, 0, 2, 3, 4, 5, 7], k = 2
Output: [-9, -7, 7, -4, 0, 5, 3, 4, 2, 2]
move element to the end
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  // O(n) time | O(1) space fun moveElementToTheEnd(arr: MutableList&amp;lt;Int&amp;gt;, k: Int) { var low = 0 var high = arr.</description>
    </item>
    
    <item>
      <title>Three Number Sum</title>
      <link>https://solairerove.github.io/post/three-number-sum/</link>
      <pubDate>Thu, 29 Apr 2021 15:13:22 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/three-number-sum/</guid>
      <description>Input: arr = [-9, -7, -6, -4, 0, 2, 3, 4, 5, 7], target = -1
Output: [[-9, 3, 5], [-7, 2, 4], [-6, 0, 5], [-6, 2, 3], [-4, 0, 3]]
three number sum
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  // O(n^2) time | O(n) space fun threeNumberSum(arr: MutableList&amp;lt;Int&amp;gt;, target: Int): List&amp;lt;List&amp;lt;Int&amp;gt;&amp;gt; { arr.</description>
    </item>
    
    <item>
      <title>Validate Subsequence</title>
      <link>https://solairerove.github.io/post/validate-subsequence/</link>
      <pubDate>Thu, 29 Apr 2021 14:39:58 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/validate-subsequence/</guid>
      <description>validate subsequence
1 2 3 4 5 6 7 8 9 10 11  // O(n) time | O(1) space fun validateSubsequence(arr: List&amp;lt;Int&amp;gt;, subsequence: List&amp;lt;Int&amp;gt;): Boolean { var seqIdx = 0 for (el in arr) { if (seqIdx == subsequence.size) break if (el == subsequence[seqIdx]) seqIdx++ } return seqIdx == subsequence.size }   </description>
    </item>
    
    <item>
      <title>Pivot Index</title>
      <link>https://solairerove.github.io/post/pivot-index/</link>
      <pubDate>Tue, 20 Apr 2021 20:20:36 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/pivot-index/</guid>
      <description>leetcode
pivot index
1 2 3 4 5 6 7 8 9 10 11  // O(n) time | O(1) space fun pivotIndex(arr: List&amp;lt;Int&amp;gt;): Int { val total = arr.sum() var sum = 0 for (i in arr.indices) { if (sum * 2 == total - arr[i]) return i sum += arr[i] } return -1 }   </description>
    </item>
    
    <item>
      <title>Two Numbers Sum</title>
      <link>https://solairerove.github.io/post/two-numbers-sum/</link>
      <pubDate>Mon, 12 Apr 2021 22:06:31 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/two-numbers-sum/</guid>
      <description>Дан массив. Вернуть массив из элементов, сумма которых равна заданной. \
 Наивный подход на n^2 пересуммировать все возможные элементы. \ Линейная сложность с помощью мапы или сета. \ Константную память можно получить,
если отсортировать массив,
и почти как в бинарном поиске обновлять верхний и нижний индексы  two number sum
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33  // O(n) time | O(n) space fun twoNumberSumSet(arr: MutableList&amp;lt;Int&amp;gt;, targetSum: Int): List&amp;lt;Int&amp;gt; { val numbers = hashSetOf&amp;lt;Int&amp;gt;() for (a in arr) { val potential = targetSum - a if (numbers.</description>
    </item>
    
  </channel>
</rss>
