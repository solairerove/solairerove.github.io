<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>linked list on Headstone lamp - It&#39;s always has been</title>
    <link>https://solairerove.github.io/categories/linked-list/</link>
    <description>Recent content in linked list on Headstone lamp - It&#39;s always has been</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 16 Jun 2021 14:45:29 +0300</lastBuildDate><atom:link href="https://solairerove.github.io/categories/linked-list/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Shift Linked List</title>
      <link>https://solairerove.github.io/post/shift-linked-list/</link>
      <pubDate>Wed, 16 Jun 2021 14:45:29 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/shift-linked-list/</guid>
      <description>Input: [1, 2, 3, 4, 5], 2
Output: [4, 5, 1, 2, 3]
shift linked list
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  open class ListNode(var value: Int) { var next: ListNode? = null } // O(n) time | O(1) space fun shiftLinkedList(head: ListNode, k: Int): ListNode { var length = 1 var tail = head while (tail.</description>
    </item>
    
    <item>
      <title>Linked List</title>
      <link>https://solairerove.github.io/post/linked-list/</link>
      <pubDate>Tue, 15 Jun 2021 21:24:36 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/linked-list/</guid>
      <description>linked list
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110  class Node(val value: Int) { var next: Node?</description>
    </item>
    
    <item>
      <title>Sum of Linked Lists</title>
      <link>https://solairerove.github.io/post/sum-of-linked-lists/</link>
      <pubDate>Fri, 11 Jun 2021 16:53:53 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/sum-of-linked-lists/</guid>
      <description>Input: [1 2 3 4 5 6] [7 8 9 10] Output: [8 0 3 5 6 6]
sum of linked lists
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  class ListNode(var value: Int) { var next: ListNode? = null } // O(max(n + m)) time | O(max(n + m)) space fun sumOfLinkedLists(headFirst: ListNode, headSecond: ListNode): ListNode { val newHead = ListNode(0) var curr = newHead var carry = 0 var nodeOne: ListNode?</description>
    </item>
    
    <item>
      <title>Merge Linked Lists</title>
      <link>https://solairerove.github.io/post/merge-linked-lists/</link>
      <pubDate>Thu, 10 Jun 2021 18:08:37 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/merge-linked-lists/</guid>
      <description>Input: [1 2 3 4 5 6] [7 8 9 10] Output: [1 2 3 4 5 6 7 8 9 10]
merge linked lists
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  class ListNode(var value: Int) { var next: ListNode? = null } // O(n + m) time | O(1) space fun mergeLinkedLists(headFirst: ListNode, headSecond: ListNode): ListNode { var i: ListNode?</description>
    </item>
    
    <item>
      <title>Find Loop</title>
      <link>https://solairerove.github.io/post/find-loop/</link>
      <pubDate>Wed, 09 Jun 2021 17:31:41 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/find-loop/</guid>
      <description>Input:
1 2 3  1 -&amp;gt; 2 -&amp;gt; 3 | | 5 &amp;lt;- 4   Output: 2
find loop
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  class ListNode(var value: Int) { var next: ListNode? = null } // O(n) time | O(1) space fun findLoop(head: ListNode?): ListNode? { var first = head?.next var second = first?</description>
    </item>
    
    <item>
      <title>Remove K Node From End</title>
      <link>https://solairerove.github.io/post/remove-k-node-from-end/</link>
      <pubDate>Thu, 03 Jun 2021 20:08:24 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/remove-k-node-from-end/</guid>
      <description>Input: [1, 1, 1, 2, 2, 3], 2
Output: [1, 1, 1, 2, 3]
remove k node from end
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  class ListNode(var value: Int) { var next: ListNode? = null } // O(n) time | O(1) space fun removeKNodeFromEnd(head: ListNode, k: Int) { var cnt = 1 var first = head var second: ListNode?</description>
    </item>
    
    <item>
      <title>Remove Duplicates From Linked List</title>
      <link>https://solairerove.github.io/post/remove-duplicates-from-linked-list/</link>
      <pubDate>Wed, 02 Jun 2021 20:04:39 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/remove-duplicates-from-linked-list/</guid>
      <description>Input: [1, 1, 1, 2, 2, 3]
Output: [1, 2, 3]
remove duplicates from linked list
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  class ListNode(var value: Int) { var next: ListNode? = null } // O(n) time | O(1) space fun removeDuplicatesFromLinkedList(linkedList: ListNode): ListNode { var curr: ListNode? = linkedList while (curr != null) { var next = curr.</description>
    </item>
    
    <item>
      <title>Reverse Linked List</title>
      <link>https://solairerove.github.io/post/reverse-linked-list/</link>
      <pubDate>Tue, 20 Apr 2021 19:47:52 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/reverse-linked-list/</guid>
      <description>leetcode
reverse linked list
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  class ListNode(var value: Int) { var next: ListNode? = null } // O(n) time | O(1) space fun reverseList(head: ListNode?): ListNode? { var prev: ListNode? = null var curr: ListNode? = head while (curr != null) { val next = curr.next curr.next = prev prev = curr curr = next } return prev }   </description>
    </item>
    
  </channel>
</rss>
