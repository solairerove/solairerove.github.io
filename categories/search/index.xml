<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>search on Headstone lamp - It&#39;s always has been</title>
    <link>https://solairerove.github.io/categories/search/</link>
    <description>Recent content in search on Headstone lamp - It&#39;s always has been</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 15 Apr 2021 23:26:27 +0300</lastBuildDate><atom:link href="https://solairerove.github.io/categories/search/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Search in Matrix</title>
      <link>https://solairerove.github.io/post/search-in-matrix/</link>
      <pubDate>Thu, 15 Apr 2021 23:26:27 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/search-in-matrix/</guid>
      <description>leetcode
third maximum number
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  // O(n + m) time | O(1) space fun searchInMatrix(matrix: List&amp;lt;List&amp;lt;Int&amp;gt;&amp;gt;, target: Int): List&amp;lt;Int&amp;gt; { var row = 0 var col = matrix[0].size - 1 while (row &amp;lt; matrix.size &amp;amp;&amp;amp; col &amp;gt;= 0) { when { matrix[row][col] &amp;lt; target -&amp;gt; row++ matrix[row][col] &amp;gt; target -&amp;gt; col-- else -&amp;gt; return listOf(row, col) } } return listOf(-1, -1) }   </description>
    </item>
    
    <item>
      <title>Third Maximum Number</title>
      <link>https://solairerove.github.io/post/third-maximum-number/</link>
      <pubDate>Thu, 15 Apr 2021 22:56:13 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/third-maximum-number/</guid>
      <description>leetcode
third maximum number
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  // O(n) time | O(1) space fun thirdMaximumNumber(arr: List&amp;lt;Int&amp;gt;): Int { val largestNumbers = mutableListOf(Int.MIN_VALUE, Int.MIN_VALUE, Int.MIN_VALUE) for (element in arr) { when { element &amp;gt; largestNumbers[2] -&amp;gt; shift(largestNumbers, element, 2) element &amp;gt; largestNumbers[1] -&amp;gt; shift(largestNumbers, element, 1) element &amp;gt; largestNumbers[0] -&amp;gt; shift(largestNumbers, element, 0) } } return largestNumbers[0] } fun shift(arr: MutableList&amp;lt;Int&amp;gt;, toInsert: Int, position: Int) { for (i in 0 until position + 1) { arr[i] = if (i == position) toInsert else arr[i + 1] } }   </description>
    </item>
    
    <item>
      <title>Quick Select</title>
      <link>https://solairerove.github.io/post/quick-select/</link>
      <pubDate>Tue, 13 Apr 2021 22:01:11 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/quick-select/</guid>
      <description>quick select
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39  // O(n) time | O(1) space fun quickSelect(arr: MutableList&amp;lt;Int&amp;gt;, k: Int): Int { var low = 0 var high = arr.size - 1 while (low &amp;lt; high) { val j = partition(arr, low, high) when { j &amp;lt; k -&amp;gt; low = j + 1 j &amp;gt; k -&amp;gt; high = j - 1 else -&amp;gt; return arr[j] } } return arr[low] } fun partition(arr: MutableList&amp;lt;Int&amp;gt;, low: Int, high: Int): Int { var i = low var j = high + 1 val v = arr[low] while (true) { while (arr[++i] &amp;lt; v) if (i == high) break while (v &amp;lt; arr[--j]) if (j == low) break if (j &amp;lt;= i) break swap(arr, i, j) } swap(arr, low, j) return j } fun swap(arr: MutableList&amp;lt;Int&amp;gt;, i: Int, j: Int) { val temp = arr[i] arr[i] = arr[j] arr[j] = temp }   </description>
    </item>
    
    <item>
      <title>Bisect left</title>
      <link>https://solairerove.github.io/post/bisect_left/</link>
      <pubDate>Thu, 08 Apr 2021 22:24:47 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/bisect_left/</guid>
      <description>binary select left
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  // O(log(n)) time | O(1) space fun biSectLeft(arr: List&amp;lt;Int&amp;gt;, target: Int, lo: Int = 0, hi: Int = arr.size): Int { val n = arr.size if (n == 0) return 0 var low = lo var high = hi if (target &amp;lt; arr[low]) return low if (target &amp;gt; arr[high - 1]) return high while (true) { if (low + 1 == high) { return if (target == arr[low]) low else (low + 1) } val mid = low + (high - low) / 2 when { target &amp;lt;= arr[mid] -&amp;gt; high = mid else -&amp;gt; low = mid } } }   </description>
    </item>
    
    <item>
      <title>Bisect right</title>
      <link>https://solairerove.github.io/post/bisect_right/</link>
      <pubDate>Thu, 08 Apr 2021 22:24:43 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/bisect_right/</guid>
      <description>binary select right
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  // O(log(n)) time | O(1) space fun biSectRight(arr: List&amp;lt;Int&amp;gt;, target: Int, lo: Int = 0, hi: Int = arr.size): Int { val n = arr.size if (n == 0) return 0 var low = lo var high = hi if (target &amp;lt; arr[low]) return low if (target &amp;gt; arr[high - 1]) return high while (true) { if (low + 1 == high) { return low + 1 } val mid = low + (high - low) / 2 when { target &amp;lt; arr[mid] -&amp;gt; high = mid else -&amp;gt; low = mid } } }   </description>
    </item>
    
    <item>
      <title>Binary Search</title>
      <link>https://solairerove.github.io/post/binary-search/</link>
      <pubDate>Thu, 25 Feb 2021 17:32:26 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/binary-search/</guid>
      <description>Бинарный поиск - алгоритм, на вход которого подается отсортированный список элементов. Если искомый элемент присутствует, то бинарный поиск возвращает его позицию.
Предположим, что вы загадали число от 1 до 100. При каждой попытке угадать я буду давать один из трех ответов: много, мало и угадал. Можно перебирать все вариант подряд: 1, 2, 3, 4. А можно исключить сразу половину чисел на каждом шаге: 50, 75, 63.
binary search
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  // O(log(n)) time | O(1) space private fun binarySearch(items: List&amp;lt;Int&amp;gt;, item: Int): Int { // храним границы части списка, в которой выполняется поиск  var low = 0 var high = items.</description>
    </item>
    
  </channel>
</rss>
