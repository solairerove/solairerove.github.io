<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>symbol table on Headstone lamp - It&#39;s always has been</title>
    <link>https://solairerove.github.io/categories/symbol-table/</link>
    <description>Recent content in symbol table on Headstone lamp - It&#39;s always has been</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 02 Nov 2021 14:42:40 +0300</lastBuildDate><atom:link href="https://solairerove.github.io/categories/symbol-table/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Binary Search Symbol Table</title>
      <link>https://solairerove.github.io/post/binary-search-symbol-table/</link>
      <pubDate>Tue, 02 Nov 2021 14:42:40 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/binary-search-symbol-table/</guid>
      <description>Упорядоченная символьная таблица для бинарного поиска.
binary search st
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93  private const val INITIAL_CAPACITY = 2 class BinarySearchST&amp;lt;Key : Comparable&amp;lt;Key&amp;gt;, Value&amp;gt; { private var keys: MutableList&amp;lt;Key?</description>
    </item>
    
    <item>
      <title>Sequential Symbol Table</title>
      <link>https://solairerove.github.io/post/sequential-symbol-table/</link>
      <pubDate>Fri, 29 Oct 2021 17:46:36 +0300</pubDate>
      
      <guid>https://solairerove.github.io/post/sequential-symbol-table/</guid>
      <description>Символьная таблица для последовательного поиска в неупорядоченном массиве.
sequential st
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  class SequentialSearchST&amp;lt;Key, Value&amp;gt; { private var first: Node? = null inner class Node(val key: Key, var value: Value?, val next: Node?) fun get(key: Key): Value? { var x = first while (x !</description>
    </item>
    
  </channel>
</rss>
